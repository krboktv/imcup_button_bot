const Server = require("./server.js");
const builder = require('botbuilder');
const db = require("./db.js");
const ObjectID = require("mongodb").ObjectID;
const Waves = require("./waves.js");
const Course = require('./course.js');
const Objects = require('./objects.js');
const DateTime = require('./date.js');
const Cards = require('./cards.js');
const Link = require('./schemes/linkScheme.js');
const rp = require('request-promise');
const LuisModelUrl = "https://westus.api.cognitive.microsoft.com/luis/v2.0/apps/a75a45b7-c84d-4567-8eb6-fc637c9744d0?subscription-key=fa895b902ea44a41a1f1d347e0ff6600&verbose=true&timezoneOffset=0&q=";

var recognizer = new builder.LuisRecognizer(LuisModelUrl);
// const Ajax = require('ajax-request');

var bot = new builder.UniversalBot(Server.connector, [
    (session) => {
        session.beginDialog('SecondMenu');
    }
]).set('storage', Server.memory.inMemoryStorage);
bot.recognizer(recognizer);

bot.dialog('SecondMenu', [
    (session) => {
        db.findUser(session.message.user.id, (account) => {
            if (account != undefined) {
                builder.Prompts.choice(session, "## –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 'üõí Marketplace|ü§î –ß—Ç–æ –º–Ω–µ –ø–æ–µ—Å—Ç—å?|üí≥ –ö–æ—à–µ–ª—ë–∫|üíº –ü–∞—Ä—Ç–Ω—ë—Ä–∞–º', {
                    listStyle: builder.ListStyle.button
                });
            } else {
                session.beginDialog('createWallet');
                return;
            }
        })

    },
    (session, results) => {
        switch (results.response.index) {
            case 0:
                session.beginDialog('marketplace');
                break;
            case 1:
                session.beginDialog('getAtach');
                break;
            case 2:
                session.beginDialog('wallet');
                break;
            case 3:
                session.beginDialog('addProduct');
                break;
            default:
                session.endDialog();
                break;
        }
    }
], intents).reloadAction('showMenu', null, {
    matches: /^(menu|back)/i
}).triggerAction({
    matches: /–æ—Ç–º–µ–Ω–∞|Eat/i
}).triggerAction({
    matches: /^(start|Eat)/i
}).beginDialogAction('Eat', 'getAtach');;

bot.dialog('wallet', [
    (session) => {
        getBal(session, (message) => {
            session.send(message);
            builder.Prompts.choice(session, '–í—ã–±–µ—Ä–µ—Ç–µ:', 'üí≥ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏|üíπ –ö—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∞|üîê –ê–∫–∫–∞—É–Ω—Ç|‚ùå –û—Ç–º–µ–Ω–∞', {
                listStyle: builder.ListStyle.button
            });
        });
    },
    (session, results) => {
        switch (results.response.index) {
            case 0:
                session.beginDialog('makeAtransaction');
                break;
            case 1:
                session.beginDialog('exchange');
                break;
            case 2:
                session.beginDialog('myAccountInfo');
                break;
            case 3:
                session.beginDialog('SecondMenu');
                break;
            default:
                session.endDialog();
                break;
        }
    }
]);

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
bot.dialog('myAccountInfo', [
    (session, results) => {
        db.findUser(session.message.user.id,
            (account) => {
                const seed = Waves.wavesAccount(session.message.user.id, 'decryptSeed', account.encrSeed);

                var card = Cards.createReceiptCard(session, session.message.user.name);
                var msg = new builder.Message(session).addAttachment(card);

                session.send(msg);
                session.send('üì¨ –ú–æ–π –∞–¥—Ä–µ—Å:');
                session.send(seed.address);
                session.send('üõë –ú–æ–π SEED (–Ω–∏–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–π—Ç–µ!): ');
                session.send(seed.phrase);
                session.beginDialog('SecondMenu');
            }
        );
    }
]);

// –°–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª—ë–∫
bot.dialog('createWallet', [
    (session) => {
        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å Waves
        // seed[0] - –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π seed
        // seed[1] - seed

        const seed = Waves.wavesAccount(session.message.user.id, 'createNewAcc');

        db.createAndUpdateUser(session.message.user.id, seed[1].address, seed[0], session.message.user.name, (done) => {
            if (done == true) {
                session.send('üõë **–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø–∏—à–∏—Ç–µ Seed!** \n\n–í–∞—à Seed: ');
                session.send(seed[1].phrase);
                session.send('üì¨ –í–∞—à Address: ');
                session.send(seed[1].address);
                session.replaceDialog('SecondMenu');
            } else {
                session.send('–ù–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è');
                session.beginDialog('SecondMenu');
            }
        });
    },
]);

//–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ—à–µ–ª—ë–∫
bot.dialog('addWallet', [
    (session) => {
        builder.Prompts.text(session, "–í–≤–µ–¥–∏—Ç–µ Seed");
        let card = Cards.cancelButton(session);
        let msg = new builder.Message(session).addAttachment(card);
        session.send(msg);
    },
    (session, results) => {
        if (results.response.length < 50) {
            session.send('Seed –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 50-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤');
            session.beginDialog('addWallet');
            return;
        }
        if (results.response == '–æ—Ç–º–µ–Ω–∞') {
            session.beginDialog('SecondMenu');
            return;
        }

        if (results.response != "") {
            const seed = Waves.wavesAccount(session.message.user.id, 'addNewAcc', results.response);
            db.removeUser(session.message.user.id, (done) => {
                if (done == true) {
                    db.createAndUpdateUser(session.message.user.id, seed[1].address, seed[0], session.message.user.name, (done) => {
                        if (done == true) {
                            session.send('üì¨ –ú–æ–π –∞–¥—Ä–µ—Å:');
                            session.send(seed[1].address);
                            session.send('üõë –ú–æ–π SEED (–Ω–∏–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–π—Ç–µ!): ');
                            session.send(seed[1].phrase);
                            session.beginDialog('SecondMenu');
                        } else {
                            session.send('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                            session.beginDialog('SecondMenu');
                        }
                    })
                } else {
                    session.send('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∞–∫–∫–∞—É–Ω—Ç');
                    session.beginDialog('SecondMenu');
                }
            })
        }
    }
]).triggerAction({
    matches: /—Å–º–µ–Ω–∏—Ç—å_–∞–∫–∫–∞—É–Ω—Ç/
});

bot.dialog('makeAtransaction', [
    (session) => {
        builder.Prompts.choice(session, "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞", Objects.currency, {
            listStyle: builder.ListStyle.button
        });
    },
    (session, results) => {

        var crypto = Objects.currency[results.response.entity];

        if (crypto == '–æ—Ç–º–µ–Ω–∞') {
            session.beginDialog('SecondMenu');
            return;
        } else {

            session.userData.currency = Objects.currency[results.response.entity];

            db.findUser(session.message.user.id, (account) => {
                Waves.getBalance(session, account.address, session.userData.currency.assetID, session.userData.currency.ticker, (balance, rub) => {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
                    if (balance <= 0) {
                        session.send('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞');
                        session.beginDialog('SecondMenu');
                        return;
                    }

                    function syncCheck(callback) {
                        var balanceSubComission;
                        if (session.userData.currency.assetID == 'WAVES') {
                            balanceSubComission = balance - 0.001;
                            callback(balanceSubComission);
                        } else {
                            Waves.checkWavesBalance(account.address, (wavesBalance) => {
                                balanceSubComission = wavesBalance - 0.001;
                                callback(balanceSubComission);
                            });
                        }
                    }


                    syncCheck((balanceSubComission) => {
                        // –ü—Ä–æ–≤–µ—Ä—è–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–æ–º–∏—Å—Å–∏—é
                        if (balanceSubComission < 0) {
                            session.send('–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ WAVES –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏.');
                            session.beginDialog('SecondMenu');
                            return;
                        }

                        // –ö—É—Ä—Å
                        session.userData.price = rub;
                        // –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö –ø–æ –∫—É—Ä—Å—É
                        session.userData.priceInRub = balance * rub;

                        session.send("## –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ " + `${crypto.name}` + ". –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.\n\n\0\n\n" +
                            "`–ë–∞–ª–∞–Ω—Å:` " + `${balance}` + " " + `${crypto.ticker}` + "\n\n" +
                            "`–ü—Ä–∏–º–µ—Ä–Ω–æ: `" + `${(session.userData.priceInRub).toFixed(2)}` + " RUB\n\n\0\n\n" +
                            "`–ö—É—Ä—Å " + crypto.name + ':` ' + `${session.userData.price}` + " RUB\n\n\0\n\n" +
                            "`–ö–æ–º–∏—Å—Å–∏—è:` 0.001" + " WAVES\n\n\0\n\n"
                        );

                        builder.Prompts.choice(session, "–í –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ –í—ã —Ö–æ–¥–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥?", `${crypto.ticker}|RUB|–ù–∞–∑–∞–¥`, {
                            listStyle: builder.ListStyle.button
                        });
                    });
                })
            });
        }
    },
    (session, results) => {
        var x;
        if (results.response.entity == "RUB") {
            session.send('–í—ã –≤—ã–±—Ä–∞–ª–∏ –†–æ—Å—Å–∏–π—Å–∫–∏–π –†—É–±–ª—å');
            x = 1;
        } else if (results.response.entity == session.userData.currency.ticker) {
            session.send("–í—ã –≤—ã–±—Ä–∞–ª–∏ " + session.userData.currency.name);
            x = 0;
        } else {
            session.beginDialog('makeAtransaction');
            return;
        }

        session.userData.whatCurrency = x;

        // –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
        let card = Cards.createSumCard(session);
        let msg = new builder.Message(session).addAttachment(card);
        session.send(msg);
    },
    (session, results) => {
        var re = new RegExp('.', '');

        var sum;

        //–ú–µ–Ω—è–µ–º —Ç–æ—á–∫—É –Ω–∞ –∑–∞–ø—è—Ç—É—é
        if (results.response.search(re) == 0) {
            sum = Number(results.response.replace(',', "."));
        }

        if (results.response == 0) {
            session.send('–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π.');
            session.beginDialog('SecondMenu');
            return;
        }

        // –†—É–±–ª—å –∏–ª–∏ –∫—Ä–∏–ø—Ç–∞? –≤–æ—Ç –≤ —á—ë–º –≤–æ–ø–æ–æ—Å
        if (session.userData.whatCurrency == 1) {
            session.userData.sumInRub = (sum).toFixed(2);
            sum = sum / session.userData.price;
        } else {
            // –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö 
            session.userData.sumInRub = (sum * session.userData.price).toFixed(2);
        }

        // –°—É–º–º–∞ –≤ –∫—Ä–∏–ø—Ç–µ
        session.userData.sum = (sum).toFixed(8);

        db.findUser(session.message.user.id, (account) => {
            session.userData.address1 = account.address;
            session.userData.encrSeed = account.encrSeed;

            Waves.getBalance(session, account.address, session.userData.currency.assetID, 'noCourse', function (balance) {
                // –ï—Å–ª–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥
                if (Number(balance) >= Number(session.userData.sum)) {
                    // –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ –∫–æ–º–∏—Å—Å–∏—é, –∫–æ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–µ–º WAVES
                    if ((session.userData.currency.assetID == 'WAVES') && (Number(Number(balance) - 0.001) < Number(session.userData.sum))) {
                        session.endDialog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–æ–º–∏—Å—Å–∏—é –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞');
                        return;
                    }

                    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –∏–ª–∏ –∞–¥—Ä–µ—Å —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏
                    builder.Prompts.text(session, "–í–≤–µ–¥–∏—Ç–µ **–±–ª–æ–∫—á–µ–π–Ω Waves –∞–¥—Ä–µ—Å** –∏–ª–∏ nickname –ø–æ–ª—É—á–∞—Ç–µ–ª—è");
                } else {
                    session.endDialog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞. \n\n –í–∞—à –±–∞–ª–∞–Ω—Å: ' + `${balance} ${session.userData.currency.name}`);
                    return;
                }
            });
        })
    },
    (session, results) => {
        // –ï—Å–ª–∏ –º—ã –≤–≤–æ–¥–∏–º –∞–¥—Ä–µ—Å WAVES
        if (results.response.length == 35) {
            session.userData.address2 = results.response;

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            var currentData = DateTime.getTransactionData();
            session.send("## –î–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–≤–æ–¥–µ \n\n\0\n\n" +
                "`–ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è` \n\n" + `${session.message.user.name} \n\n` +
                "`–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è` \n\n" + `${session.userData.address1} \n\n\0\n\n` +
                "`–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è` \n\n" + `${session.userData.name2} \n\n` +
                "`–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è` \n\n" + `${session.userData.address2} \n\n\0\n\n` +
                "`–í–∞–ª—é—Ç–∞` \n\n" + `${session.userData.currency.name} \n\n` +
                "`–ö—É—Ä—Å –∫ —Ä—É–±–ª—é` \n\n" + `${session.userData.price} \n\n\0\n\n` +
                "`–°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö` \n\n" + `${session.userData.sumInRub} \n\n` +
                "`–°—É–º–º–∞ –≤ –≤–∞–ª—é—Ç–µ` \n\n" + `${session.userData.sum} \n\n\0\n\n` +
                "`–í—Ä–µ–º—è –ø–µ—Ä–µ–≤–æ–¥–∞` \n\n" + `${currentData} \n\n`
            );

            builder.Prompts.choice(session, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥?", "–î–∞|–ù–µ—Ç");
        } else {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–∏–∫. –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ "–Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞"
            var re1 = new RegExp('@', '');
            // –£–¥–∞–ª—è–µ–º '@' –∏–∑ –Ω–∏–∫–∞
            var re;
            if (results.response.search(re1) != 0) {
                re = new RegExp(results.response, 'i');
            } else {
                var name = results.response.substring(1, results.response.length);
                re = new RegExp(name, 'i');
            }

            db.findUserByName(re, (account) => {
                if (account != false) {

                } else {
                    session.send('–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
                    session.beginDialog('SecondMenu');
                    return;
                }
            });
            if (account.name != session.message.user.name) {
                session.userData.name2 = account.name;
                session.userData.address2 = account.address;

                var currentData = DateTime.getTransactionData();
                session.send("## –î–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–≤–æ–¥–µ \n\n\0\n\n" +
                    "`–ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è` \n\n" + `${session.message.user.name} \n\n` +
                    "`–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è` \n\n" + `${session.userData.address1} \n\n\0\n\n` +
                    "`–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è` \n\n" + `${session.userData.name2} \n\n` +
                    "`–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è` \n\n" + `${session.userData.address2} \n\n\0\n\n` +
                    "`–í–∞–ª—é—Ç–∞` \n\n" + `${session.userData.currency.name} \n\n` +
                    "`–ö—É—Ä—Å –∫ —Ä—É–±–ª—é` \n\n" + `${session.userData.price} \n\n\0\n\n` +
                    "`–°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö` \n\n" + `${session.userData.sumInRub} \n\n` +
                    "`–°—É–º–º–∞ –≤ –≤–∞–ª—é—Ç–µ` \n\n" + `${session.userData.sum} \n\n\0\n\n` +
                    "`–í—Ä–µ–º—è –ø–µ—Ä–µ–≤–æ–¥–∞` \n\n" + `${currentData} \n\n`
                );

                builder.Prompts.choice(session, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥?", "–î–∞|–ù–µ—Ç");
            } else {
                session.send('–ù–µ–ª—å–∑—è —Å–æ–≤–µ—Ä—à–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å–µ–±–µ.');
                session.beginDialog('SecondMenu');
                return;
            }
        }
    },
    (session, results) => {
        session.userData.name1 = session.message.user.name;
        switch (results.response.index) {
            case 0:
                session.send("–í–∞—à –ø–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –æ–∫–æ–ª–æ 30 —Å–µ–∫—É–Ω–¥");

                db.findUser(session.message.user.id, (account) => {
                    var address1 = account.address;

                    // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º Seed
                    const seed = Waves.wavesAccount(session.message.user.id, 'decryptSeed', account.encrSeed);

                    var sumPeresilka = Number((session.userData.sum) * Math.pow(10, session.userData.stepen)).toFixed(0);

                    Waves.transfer(session.userData.address2, session.userData.currency.assetID, sumPeresilka, seed.keyPair)
                        .then(
                            (responseData) => {
                                console.log(responseData);
                                db.findUserByAddress(session.userData.address2, (account) => {

                                });
                                session.beginDialog('SecondMenu');
                            }
                        )
                        .catch(
                            (err) => {
                                console.log(err);
                                session.send('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ –∫–∞–∫–∏–º-—Ç–æ –ø—Ä–∏—á–∏–Ω–∞–º –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –±—ã–ª —Å–æ–≤–µ—Ä—à—ë–Ω.');
                                session.beginDialog('SecondMenu');
                            }
                        )
                });
                break;
            case 1:
                session.endDialog("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥")
                break;
            default:
                session.endDialog();
                break;
        }
    }
]).cancelAction('cancelAction', '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥.', {
    matches: /–æ—Ç–º–µ–Ω–∞/i
});

// –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–ª–∞–Ω—Å—ã
function getBal(session, callback) {
    db.findUser(session.message.user.id, (account) => {
        Waves.getBalance(session, account.address, 'all', 'all', (balances, course) => {
            if (course) {
                session.userData.course = course;
            }

            callback("## Food Hack –∫–æ—à–µ–ª–µ–∫ \n\n\0\n\n" +
                "`Waves:` " + `${Number(balances['Waves'])}` + " WAVES \n\n" + "`–ü—Ä–∏–º–µ—Ä–Ω–æ:` " + `${(session.userData.course['WAVES']*balances['Waves']).toFixed(2)}` + " RUB \n\n\0\n\n" +
                "`Bitcoin:` " + `${Number(balances['Bitcoin'])}` + " BTC \n\n" + "`–ü—Ä–∏–º–µ—Ä–Ω–æ:` " + `${(session.userData.course['BTC']*balances['Bitcoin']).toFixed(2)}` + " RUB\n\n\0\n\n" +
                "`Ethereum:` " + `${Number(balances['Ethereum'])}` + " ETH \n\n" + "`–ü—Ä–∏–º–µ—Ä–Ω–æ:` " + `${(session.userData.course['ETH']*balances['Ethereum']).toFixed(2)}` + " RUB\n\n\0\n\n" +
                "`ZCash:` " + `${Number(balances['ZCash'])}` + " ZEC \n\n" + "`–ü—Ä–∏–º–µ—Ä–Ω–æ:`" + `${(session.userData.course['ZEC']*balances['ZCash']).toFixed(2)}` + " RUB\n\n\0\n\n" +
                "`Litecoin:` " + `${Number(balances['Litecoin'])}` + " LTC \n\n" + "`–ü—Ä–∏–º–µ—Ä–Ω–æ:` " + `${(session.userData.course['LTC']*balances['Litecoin']).toFixed(2)}` + " RUB\n\n\0\n\n" +
                "`US Dollar:` " + `${(Number(balances['US_Dollar'])).toFixed(2)}` + " USD \n\n" + "`–ü—Ä–∏–º–µ—Ä–Ω–æ:` " + `${(session.userData.course['USD']*balances['US_Dollar']).toFixed(2)}` + " RUB\n\n\0\n\n" +
                "`Euro:` " + `${(Number(balances['Euro'])).toFixed(2)}` + " EUR \n\n" + "`–ü—Ä–∏–º–µ—Ä–Ω–æ:` " + `${(session.userData.course['EUR']*balances['Euro']).toFixed(2)}` + " RUB\n\n\0\n\n" +
                "`–í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–Ω–æ:` " + `${(Number((session.userData.course['WAVES']*balances['Waves']).toFixed(0))+Number((session.userData.course['BTC']*balances['Bitcoin']).toFixed(2))+Number((session.userData.course['ETH']*balances['Ethereum']).toFixed(0))+Number((session.userData.course['ZEC']*balances['ZCash']).toFixed(0))+Number((session.userData.course['LTC']*balances['Litecoin']).toFixed(0))+Number((session.userData.course['USD']*balances['US_Dollar']).toFixed(0))+Number((session.userData.course['EUR']*balances['Euro']).toFixed(0))).toFixed(2)} RUB\n\n`);
        });
    });
}

// –ë–∏—Ä–∂–∞
bot.dialog('exchange', [
    (session, args, next) => {
        getBal(session, (res) => {
            session.send(res);
            db.findUser(session.message.user.id, (account) => {
                Waves.checkWavesBalance(account.address, (balance) => {
                    if (balance < 0.003) {
                        session.endDialog('–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ WAVES –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏.');
                    } else {
                        Course.inRub(session, 'all', 'RUB', true, Objects.currency)
                            .then((courseCur) => {
                                session.userData.courseCur = courseCur;
                                session.send("üîÑ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ **–æ–±–º–µ–Ω–∏–≤–∞—Ç—å** –æ–¥–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –Ω–∞ –¥—Ä—É–≥—É—é");
                                builder.Prompts.choice(session, 'üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ **–∫—É–ø–∏—Ç—å:** ', courseCur, {
                                    listStyle: builder.ListStyle.button
                                });
                            });
                    }
                });
            });
        });
    },
    (session, results, next) => {
        if (results.response.entity == '–ù–∞–∑–∞–¥') {
            session.beginDialog('SecondMenu');
            return;
        }
        var gegus = {};
        var afterChange;
        if (session.userData.successCourse != 0) {
            session.userData.currency1 = session.userData.courseCur[results.response.entity];

            afterChange = Object.assign(gegus, Objects.exchange);
            delete afterChange[session.userData.courseCur[results.response.entity]];
        } else {
            session.userData.currency1 = currency[results.response.entity].name;
            console.log(results);

            afterChange = Object.assign(gegus, Objects.exchange);
            delete afterChange[currency[results.response.entity].name];
        }


        builder.Prompts.choice(session, `üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é **–ø—Ä–æ–¥–∞–µ—Ç–µ:** `, afterChange, {
            listStyle: builder.ListStyle.button
        });
    },
    (session, results, next) => {
        if (results.response.entity == '–ù–∞–∑–∞–¥') {
            session.beginDialog('exchange');
            return;
        } else {
            session.userData.currency2 = results.response.entity;
            session.beginDialog('enterSumExchange', {
                reload: 'no'
            });
        }
    }
]);

bot.dialog('enterSumExchange', [
    (session, args, next) => {
        rp.get(`https://nodes.wavesnodes.com/matcher/orderbook/${Objects.exchange[session.userData.currency1][session.userData.currency2].assetID1}/${Objects.exchange[session.userData.currency1][session.userData.currency2].assetID2}`, (err, res, body) => {

            })
            .then((res) => {
                var orderBook = JSON.parse(res);
                session.userData.orderBook = orderBook;
                var type = Objects.exchange[session.userData.currency1][session.userData.currency2].type;

                if (type == 'sell')
                    type = 'bids';
                else
                    type = 'asks';

                session.userData.typeOrderBook = type;

                if ((session.userData.currency1 != 'US Dollar' && session.userData.currency1 != 'Euro') && (session.userData.currency2 != 'US Dollar' && session.userData.currency2 != 'Euro')) {
                    session.userData.stepen = 8;
                    session.userData.decimals = 8;
                    session.userData.price = 8;
                } else if (((session.userData.currency1 == 'US Dollar' || session.userData.currency1 == 'Euro') && (session.userData.currency2 == 'US Dollar' || session.userData.currency2 == 'Euro')) || (session.userData.currency1 == 'US Dollar' || session.userData.currency1 == 'Euro') && (session.userData.currency2 != 'US Dollar' && session.userData.currency2 != 'Euro')) {
                    session.userData.stepen = 2;
                    session.userData.decimals = 2;
                    session.userData.price = 8;
                } else if (((session.userData.currency1 == 'US Dollar' || session.userData.currency1 == 'Euro') && (session.userData.currency2 != 'US Dollar' && session.userData.currency2 != 'Euro'))) {
                    session.userData.stepen = 2;
                    session.userData.decimals = 2;
                    session.userData.price = 2;
                } else if ((session.userData.currency1 != 'US Dollar' && session.userData.currency1 != 'Euro') && (session.userData.currency2 == 'US Dollar' || session.userData.currency2 == 'Euro')) {
                    session.userData.stepen = 2;
                    session.userData.decimals = 8;
                    session.userData.price = 8;
                } else {
                    session.userData.stepen = 8;
                    session.userData.decimals = 2;
                    session.userData.price = 2;
                }

                // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞
                if (Object.keys(orderBook[type]).length > 0) {
                    session.userData.orderPrice = orderBook[type][0].price;
                } else {
                    session.send('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–±–º–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                    session.beginDialog('SecondMenu');
                    return;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ —É —é–∑–µ—Ä–∞ –ø–æ –¥–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ
                db.findUser(session.message.user.id, (account) => {
                    Waves.getBalance(session, account.address, Objects.currency[session.userData.currency2].assetID, 'noCourse', (balance) => {
                        if (balance != 0) {
                            session.userData.balanceCur2 = balance;
                            var balanceToCheck = Number(balance);
                            if (session.userData.currency2 == 'Waves') {
                                balanceToCheck = Number(balanceToCheck - 0.003);
                            }

                            // –°–∫–æ–ª—å–∫–æ –º–∞–∫—Å–∏–º—É–º —Å–º–æ–∂–µ—Ç –∫—É–ø–∏—Ç—å —é–∑–µ—Ä
                            var amount;
                            if (Objects.exchange[session.userData.currency1][session.userData.currency2].type == 'sell') {
                                if ((session.userData.currency1 == 'US Dollar' || session.userData.currency1 == 'Euro') && (session.userData.currency2 != 'US Dollar' && session.userData.currency2 != 'Euro')) {
                                    amount = Number(((balanceToCheck).toFixed(session.userData.decimals) * (session.userData.orderPrice * Math.pow(10, -2))).toFixed(session.userData.decimals));
                                } else {
                                    amount = Number(((balanceToCheck).toFixed(session.userData.decimals) * (session.userData.orderPrice * Math.pow(10, -session.userData.price))).toFixed(session.userData.decimals));
                                }
                            } else {
                                if ((session.userData.currency1 == 'US Dollar' || session.userData.currency1 == 'Euro') && (session.userData.currency2 != 'US Dollar' && session.userData.currency2 != 'Euro')) {
                                    amount = Number(((balanceToCheck).toFixed(session.userData.decimals) / (session.userData.orderPrice * Math.pow(10, -2))).toFixed(session.userData.decimals));
                                } else if ((session.userData.currency1 != 'US Dollar' && session.userData.currency1 != 'Euro') && (session.userData.currency2 == 'US Dollar' || session.userData.currency2 == 'Euro')) {
                                    amount = Number(((balanceToCheck).toFixed(session.userData.decimals) / (session.userData.orderPrice * Math.pow(10, -2))).toFixed(session.userData.decimals));
                                } else {
                                    if (session.userData.currency1 == 'Euro' && session.userData.currency2 == 'US Dollar') {
                                        amount = Number(((balanceToCheck).toFixed(session.userData.decimals) / (session.userData.orderPrice * Math.pow(10, -8))).toFixed(session.userData.decimals));
                                    } else {
                                        amount = Number(((balanceToCheck).toFixed(session.userData.decimals) / (session.userData.orderPrice * Math.pow(10, -session.userData.price))).toFixed(session.userData.decimals));
                                    }
                                }
                            }

                            session.send('üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: ' + amount + ' ' + Objects.currency[session.userData.currency1].ticker);

                            builder.Prompts.text(session, ' ');
                            let card = Cards.endExButton(session, session.userData.currency1);
                            let msg = new builder.Message(session).addAttachment(card);
                            session.send(msg);
                        } else {
                            session.send('–í–∞–º –Ω–µ—á–µ–≥–æ –º–µ–Ω—è—Ç—å');
                            session.beginDialog('SecondMenu');
                        }
                    });
                });
            })
            .catch(
                (err) => {
                    console.log(err);
                    session.send('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–±–º–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                    session.beginDialog('SecondMenu');
                    return;
                }
            );
    },
    (session, results, next) => {
        if (session.message.text == '–æ—Ç–º–µ–Ω–∞') {
            session.beginDialog('SecondMenu');
            return;
        }
        var re = new RegExp('.', '');

        var sum;

        // –ú–µ–Ω—è–µ–º —Ç–æ—á–∫—É –Ω–∞ –∑–∞–ø—è—Ç—É—é
        if (results.response.search(re) != 0) {
            sum = Number(results.response);
        } else {
            sum = Number(results.response.replace(',', "."));
        }

        if (sum < 0.0001) {
            session.send('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 0.0001 ' + Objects.currency[session.userData.currency1].ticker);
            session.beginDialog('SecondMenu');
            return;
        }

        session.userData.orderSum = sum;

        var orderBook = session.userData.orderBook;
        var type = session.userData.typeOrderBook;
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞
        if (Object.keys(orderBook[type]).length > 0) {
            if ((orderBook[type][0].amount) * Math.pow(10, -session.userData.decimals) >= session.userData.orderSum) {
                console.log('–ö–æ–ª-–≤–æ: ' + orderBook[type][0].amount);
                console.log('–¶–µ–Ω–∞: ' + orderBook[type][0].price);
                session.userData.orderPrice = orderBook[type][0].price;
            } else if ((orderBook[type][1].amount) * Math.pow(10, -session.userData.decimals) >= session.userData.orderSum && Object.keys(orderBook[type]).length > 1) {
                session.userData.orderPrice = orderBook[type][1].price;
            } else if ((orderBook[type][2].amount) * Math.pow(10, -session.userData.decimals) >= session.userData.orderSum && Object.keys(orderBook[type]).length > 2) {
                session.userData.orderPrice = orderBook[type][2].price;
            } else {
                session.send('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–±–º–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                session.beginDialog('SecondMenu');
                return;
            }
        } else {
            session.send('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–±–º–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            session.beginDialog('SecondMenu');
            return;
        }

        var amount;
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
        if (Objects.exchange[session.userData.currency1][session.userData.currency2].type == 'sell') {
            if ((session.userData.currency1 == 'US Dollar' || session.userData.currency1 == 'Euro') && (session.userData.currency2 != 'US Dollar' && session.userData.currency2 != 'Euro')) {
                amount = Number(((session.userData.orderSum).toFixed(session.userData.decimals) * (session.userData.orderPrice * Math.pow(10, -2))).toFixed(session.userData.decimals));
            } else {
                amount = Number(((session.userData.orderSum).toFixed(session.userData.decimals) / (session.userData.orderPrice * Math.pow(10, -session.userData.price))).toFixed(session.userData.decimals));
            }
        } else {
            if ((session.userData.currency1 == 'US Dollar' || session.userData.currency1 == 'Euro') && (session.userData.currency2 != 'US Dollar' && session.userData.currency2 != 'Euro')) {
                amount = Number(((session.userData.orderSum).toFixed(session.userData.decimals) * (session.userData.orderPrice * Math.pow(10, -2))).toFixed(session.userData.decimals));
            } else if ((session.userData.currency1 != 'US Dollar' && session.userData.currency1 != 'Euro') && (session.userData.currency2 == 'US Dollar' || session.userData.currency2 == 'Euro')) {
                amount = Number(((session.userData.orderSum).toFixed(session.userData.decimals) / (session.userData.orderPrice * Math.pow(10, -2))).toFixed(session.userData.decimals));
            } else {
                amount = Number(((session.userData.orderSum).toFixed(session.userData.decimals) * (session.userData.orderPrice * Math.pow(10, -session.userData.price))).toFixed(session.userData.decimals));
            }
        }
        console.log('amount: ' + amount);
        console.log('cur2: ' + session.userData.balanceCur2);
        if (session.userData.balanceCur2 < amount) {
            session.send('‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.\n\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ ' + session.userData.orderSum + ' ' + Objects.currency[session.userData.currency1].ticker + ' –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ ' + amount + ' ' + currency[session.userData.currency2].ticker + '.\n\n–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ: ' + session.userData.balanceCur2 + ' ' + currency[session.userData.currency2].ticker);
            session.beginDialog('enterSumExchange', {
                reload: 'yes'
            })
            return;
        }

        Course.inRub(session, Objects.currency[session.userData.currency1].ticker, 'RUB')
            .then(
                (course) => {
                    let card = Cards.createConfirmOrderCard(session, Objects.currency, session.userData.currency1, session.userData.currency2, session.userData.orderPrice, session.userData.orderSum, Objects.exchange[session.userData.currency1][session.userData.currency2].type, course);
                    let msg = new builder.Message(session).addAttachment(card);
                    session.send(msg);
                }
            )
            .catch(
                (err) => {
                    let card = Cards.createConfirmOrderCard(session, Objects.currency, session.userData.currency1, session.userData.currency2, session.userData.orderPrice, session.userData.orderSum, Objects.exchange[session.userData.currency1][session.userData.currency2].type);
                    let msg = new builder.Message(session).addAttachment(card);
                    session.send(msg);
                }
            );
    }
]).beginDialogAction('createDexOrder', 'createDexOrder', {
    matches: /1–¥–∞/i
});

bot.dialog('createDexOrder', [
    (session, args) => {
        db.findUser(session.message.user.id, (account) => {

            var seed = Waves.wavesAccount(session.message.user.id, 'decryptSeed', account.encrSeed);

            rp.get('https://nodes.wavesnodes.com/matcher/', (err, res, body) => {

                })
                .then((publicKey) => {
                    var amount;
                    if (Objects.exchange[session.userData.currency1][session.userData.currency2].type == 'sell')
                        amount = Number(((session.userData.orderSum * Math.pow(10, session.userData.decimals) / session.userData.orderPrice) * Math.pow(10, session.userData.price)).toFixed(0))
                    else
                        amount = Number(((session.userData.orderSum) * Math.pow(10, session.userData.decimals)).toFixed(0))

                    const transferData = {
                        senderPublicKey: seed.keyPair.publicKey,
                        matcherPublicKey: JSON.parse(publicKey),
                        amountAsset: Objects.exchange[session.userData.currency1][session.userData.currency2].assetID1,
                        priceAsset: Objects.exchange[session.userData.currency1][session.userData.currency2].assetID2,
                        orderType: Objects.exchange[session.userData.currency1][session.userData.currency2].type,
                        amount: amount,
                        price: Number(session.userData.orderPrice),
                        timestamp: Number(Date.now()),
                        expiration: Number(Date.now() + 420000),
                        matcherFee: 300000
                    };
                    console.log(transferData);
                    Waves.returnedWaves.API.Matcher.v1.createOrder(transferData, seed.keyPair).then((responseData) => {
                        console.log(responseData);
                    });
                    session.send('–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 7 –º–∏–Ω—É—Ç. –í –∏–Ω–æ–º —Å–ª—É—á–∞–µ - –≤–µ—Ä–Ω—É—Ç—Å—è');
                    session.beginDialog('SecondMenu');
                })
                .catch(
                    (err) => {
                        session.send('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–±–º–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                        session.beginDialog('SecondMenu');
                        return;
                    }
                );
        });
    }
]);


// –†–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏–µ –ª–∏—Ü–∞
bot.dialog('getAtach', [
    (session, err) => {
        session.send(
            'üòä –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–µ–±–µ –µ–¥—É **–ø–æ–¥ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.**\n\n\0\n\n' +
            '**–ü—Ä–æ—Å—Ç–æ —Å–¥–µ–ª–∞–π—Ç–µ —Å–µ–ª—Ñ–∏ –∏ –±–æ—Ç —Å–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤–∞–º —Ç–æ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ** üçïüçïüçï'
        );
        builder.Prompts.attachment(session, "üì∑ –ü—Ä–∏—à–ª–∏ –º–Ω–µ –≤–∞—à—É **—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é**");
    },
    (session, results) => {
        console.log(results.response[0].contentUrl);
        var options = {
            method: 'POST',
            uri: 'https://westus.api.cognitive.microsoft.com/face/v1.0/detect?returnFaceId=true&returnFaceLandmarks=false&returnFaceAttributes=emotion,age,gender',
            headers: {
                'Content-Type': 'application/json',
                'Ocp-Apim-Subscription-Key': 'dad667b4ce8945a68818b171cb0988cb'
            },
            body: {
                'url': String(results.response[0].contentUrl)
            },
            json: true
        };

        rp(options, (err, res, req) => {
            if (err) {
                session.send('–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –µ—â—ë —Ä–∞–∑');
                session.beginDialog('getAtach');
                return;
            }
            console.log(req[0].faceAttributes.emotion);


            // session.send('**–≠–º–æ—Ü–∏–∏:** ' + "\n\n" +
            //     "**–ì–Ω–µ–≤** " + JSON.stringify(req[0].faceAttributes.emotion.anger) + "\n\n" +
            //     "**–ü—Ä–µ–∑—Ä–µ–Ω–∏–µ** " + " " + JSON.stringify(req[0].faceAttributes.emotion.contempt) + "\n\n" +
            //     "**–û—Ç–≤—Ä–∞—â–µ–Ω–∏–µ** " + " " + JSON.stringify(req[0].faceAttributes.emotion.disgust) + "\n\n" +
            //     "**–°—Ç—Ä–∞—Ö** " + " " + JSON.stringify(req[0].faceAttributes.emotion.fear) + "\n\n" +
            //     "**–°—á–∞—Å—Ç—å–µ** " + " " + JSON.stringify(req[0].faceAttributes.emotion.happiness) + "\n\n" +
            //     "**–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π** " + " " + JSON.stringify(req[0].faceAttributes.emotion.neutral) + "\n\n" +
            //     "**–ì—Ä—É—Å—Ç—å** " + " " + JSON.stringify(req[0].faceAttributes.emotion.sadness) + "\n\n" +
            //     "**C—é—Ä–ø—Ä–∏–∑** " + " " + JSON.stringify(req[0].faceAttributes.emotion.surprise) + "\n\n" +
            //     "–ü–æ–ª: " + " " + JSON.stringify(req[0].faceAttributes.gender) + "\n\n" +
            //     "–í–æ–∑—Ä–∞—Å—Ç: " + " " + JSON.stringify(req[0].faceAttributes.age));

            var emotions = {
                "anger": {
                    name: "üò° –≥–Ω–µ–≤",
                    znach: "0"
                },
                "contempt": {
                    name: "üòí –ø—Ä–µ–∑—Ä–µ–Ω–∏–µ",
                    znach: "0"
                },
                "disgust": {
                    name: "ü§¢ –æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ",
                    znach: "0"
                },
                "fear": {
                    name: "üòì —Å—Ç—Ä–∞—Ö",
                    znach: "0"
                },
                "happiness": {
                    name: "üòä —Å—á–∞—Å—Ç—å–µ",
                    znach: "0"
                },
                "neutral": {
                    name: "üòê –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å",
                    znach: "0"
                },
                "sadness": {
                    name: "üòî –≥—Ä—É—Å—Ç—å",
                    znach: "0"
                },
                "surprise": {
                    name: "üò± —É–¥–∏–≤–ª–µ–Ω–∏–µ",
                    znach: "0"
                }

            }

            var msg1 = "–í—ã —Å–µ–π—á–∞—Å –∏—Å–ø—Ç—ã–≤–∞–µ—Ç–µ: \n\n";
            for (let i in req[0].faceAttributes.emotion) {
                if (req[0].faceAttributes.emotion[i] > 0.1) {
                    msg1 = msg1 + '   ' + emotions[i].name + '\n\n';
                }
            }
            session.send(msg1);

            var count = 1;
            var findProducts = false;

            db.findProducts(
                (products) => {
                    for (let g in products) {
                        count = count + 1;
                        var p = 0;
                        if (products[g].emotions) {
                            console.log(products[g])
                            for (let b in products[g].emotions) {
                                if ((((req[0].faceAttributes.emotion.anger > 0.3 && req[0].faceAttributes.emotion.anger < 0.9) || (req[0].faceAttributes.emotion.sadness < 0.9 && req[0].faceAttributes.emotion.sadness > 0.4)) && (req[0].faceAttributes.gender == "female")) && (products[g].emotions[b] == 'sadness' || products[g].emotions[b] == 'anger') && p == 0) {
                                    p = p + 1;
                                    var card = Cards.createPizzaCard(session, products[g].name, products[g].shortDescription, products[g].description, products[g].price, products[g].image, true, products[g].num);
                                    var msg = new builder.Message(session).addAttachment(card);
                                    session.send(msg);
                                    findProducts = true;
                                    continue;
                                } else if ((((req[0].faceAttributes.emotion.anger > 0.3 && req[0].faceAttributes.emotion.anger < 0.9) || (req[0].faceAttributes.emotion.sadness < 0.9 && req[0].faceAttributes.emotion.sadness > 0.4)) && (req[0].faceAttributes.gender == "male")) && (products[g].emotions[b] == 'sadness' || products[g].emotions[b] == 'anger') && p == 0) {
                                    p = p + 1;
                                    var card = Cards.createPizzaCard(session, products[g].name, products[g].shortDescription, products[g].description, products[g].price, products[g].image, true, products[g].num);
                                    var msg = new builder.Message(session).addAttachment(card);
                                    session.send(msg);
                                    findProducts = true;
                                    continue;

                                } else if ((req[0].faceAttributes.emotion.anger > 0.7) && (products[g].emotions[b] == 'anger') && p == 0) {
                                    p = p + 1;
                                    var card = Cards.createPizzaCard(session, products[g].name, products[g].shortDescription, products[g].description, products[g].price, products[g].image, true, products[g].num);
                                    var msg = new builder.Message(session).addAttachment(card);
                                    session.send(msg);
                                    findProducts = true;
                                    continue;

                                } else if ((req[0].faceAttributes.emotion.sadness > 0.7) && (products[g].emotions[b] == 'sadness') && p == 0) {
                                    p = p + 1;
                                    var card = Cards.createPizzaCard(session, products[g].name, products[g].shortDescription, products[g].description, products[g].price, products[g].image, true, products[g].num);
                                    var msg = new builder.Message(session).addAttachment(card);
                                    session.send(msg);
                                    findProducts = true;
                                    continue;

                                }
                                if ((req[0].faceAttributes.emotion.happiness > 0.65) && (products[g].emotions[b] == 'happiness') && p == 0) {
                                    p = p + 1;
                                    var card = Cards.createPizzaCard(session, products[g].name, products[g].shortDescription, products[g].description, products[g].price, products[g].image, true, products[g].num);
                                    var msg = new builder.Message(session).addAttachment(card);
                                    session.send(msg);
                                    findProducts = true;
                                    continue;

                                } else if ((req[0].faceAttributes.emotion.neutral > 0.666) && (products[g].emotions[b] == 'neutral') && p == 0) {
                                    p = p + 1;
                                    var card = Cards.createPizzaCard(session, products[g].name, products[g].shortDescription, products[g].description, products[g].price, products[g].image, true, products[g].num);
                                    let msg = new builder.Message(session).addAttachment(card);
                                    session.send(msg);
                                    findProducts = true;
                                    continue;

                                } else if (((req[0].faceAttributes.emotion.fear > 0 || req[0].faceAttributes.emotion.sadness > 0)) && (products[g].emotions[b] == 'sadness' || products[g].emotions[b] == 'fear') && p == 0) {
                                    p = p + 1;
                                    var card = Cards.createPizzaCard(session, products[g].name, products[g].shortDescription, products[g].description, products[g].price, products[g].image, true, products[g].num);
                                    var msg = new builder.Message(session).addAttachment(card);
                                    session.send(msg);
                                    findProducts = true;
                                    continue;

                                } else if ((req[0].faceAttributes.emotion.surprise > 0) && (products[g].emotions[b] == 'surprise') && p == 0) {
                                    p = p + 1;
                                    var card = Cards.createPizzaCard(session, products[g].name, products[g].shortDescription, products[g].description, products[g].price, products[g].image, true, products[g].num);
                                    var msg = new builder.Message(session).addAttachment(card);
                                    session.send(msg);
                                    findProducts = true;
                                    continue;

                                } else if (((req[0].faceAttributes.emotion.contempt > 0)) && (products[g].emotions[b] == 'contempt') && p == 0) {
                                    p = p + 1;
                                    var card = Cards.createPizzaCard(session, products[g].name, products[g].shortDescription, products[g].description, products[g].price, products[g].image, true, products[g].num);
                                    var msg = new builder.Message(session).addAttachment(card);
                                    session.send(msg);
                                    findProducts = true;
                                    continue;

                                } else if ((req[0].faceAttributes.emotion.disgust > 0) && (products[g].emotions[b] == 'disgust') && p == 0) {
                                    p = p + 1;
                                    var card = Cards.createPizzaCard(session, products[g].name, products[g].shortDescription, products[g].description, products[g].price, products[g].image, true, products[g].num);
                                    var msg = new builder.Message(session).addAttachment(card);
                                    session.send(msg);
                                    findProducts = true;
                                    continue;

                                } else if (((req[0].faceAttributes.emotion.anger > 0.3 || req[0].faceAttributes.emotion.contempt > 0.3)) && (products[g].emotions[b] == 'anger' || products[g].emotions[b] == 'contempt') && p == 0) {
                                    p = p + 1;
                                    var card = Cards.createPizzaCard(session, products[g].name, products[g].shortDescription, products[g].description, products[g].price, products[g].image, true, products[g].num);
                                    var msg = new builder.Message(session).addAttachment(card);
                                    session.send(msg);
                                    findProducts = true;
                                    continue;

                                } else if (((req[0].faceAttributes.emotion.contempt > 0.006)) && (products[g].emotions[b] == 'contempt') && p == 0) {
                                    p = p + 1;
                                    var card = Cards.createPizzaCard(session, products[g].name, products[g].shortDescription, products[g].description, products[g].price, products[g].image, true, products[g].num);
                                    var msg = new builder.Message(session).addAttachment(card);
                                    session.send(msg);
                                    findProducts = true;
                                    continue;

                                } else if (((req[0].faceAttributes.emotion.sadness > 0.2) && (req[0].faceAttributes.gender == "female")) && (products[g].emotions[b] == 'sadness') && p == 0) {
                                    p = p + 1;
                                    var card = Cards.createPizzaCard(session, products[g].name, products[g].shortDescription, products[g].description, products[g].price, products[g].image, true, products[g].num);
                                    var msg = new builder.Message(session).addAttachment(card);
                                    session.send(msg);
                                    findProducts = true;
                                    continue;
                                }
                            }
                        }
                    }
                    if (findProducts == false) {
                        session.send('–í–∞—à–µ –ª–∏—Ü–æ –ø–ª–æ—Ö–æ –≤–∏–¥–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑');
                        session.beginDialog('getAtach');
                        return;
                    } else {
                        // –í–û–†–û–ù–ö–ê –ü–†–û–î–ê–ñ
                        builder.Prompts.choice(session, '‚ùì –í—ã –≤—ã–±—Ä–∞–ª–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å **–≤–∫—É—Å–Ω–æ–µ**?', 'üòã –î–∞|ü§î –ï—â—ë –ø–æ–¥—É–º–∞—é', {
                            listStyle: builder.ListStyle.button
                        });
                    }
                }
            );

        })
    },
    (session, results, next) => {
        switch (results.response.index) {
            case 0:
                session.send('üéâ –ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! **–ù–∞–∂–º–∏—Ç–µ** –∫–Ω–æ–ø–∫—É **"–ö—É–ø–∏—Ç—å"**üòä');
                builder.Prompts.text(session, ' ');
                break;
            case 1:
                session.send('üòâ **–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ** —Å–Ω–æ–≤–∞, –∫–∞–∫ –ø—Ä–æ–≥–æ–ª–æ–¥–∞–µ—Ç–µ—Å—å!');
                session.beginDialog('SecondMenu');
                break;
        }
    },
    (session, results) => {
        if (results.response != '–∫—É–ø–∏—Ç—å' && results.response != '–ö—É–ø–∏—Ç—å' && results.response != '–ö–£–ü–ò–¢–¨') {
            session.userData.nextStep = 'next';
            builder.Prompts.choice(session, 'ü§î –í—ã **–≤—ã–±—Ä–∞–ª–∏** —á—Ç–æ-–Ω–∏–±—É–¥—å?', '–î–∞!|–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç', {
                listStyle: builder.ListStyle.button
            });
        } else {
            session.userData.nextStep = 'end';
            session.send('üí° –ß—Ç–æ–±—ã **–≤—ã–±—Ä–∞—Ç—å** —Ç–æ–≤–∞—Ä - **–Ω–∞–∂–º–∏—Ç–µ** –∫–Ω–æ–ø–∫—É **"–ö—É–ø–∏—Ç—å"** –ø–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–æ–º');
            builder.Prompts.text(session, ' ');
        }
    },
    (session, results) => {
        if (session.userData.nextStep == 'next') {
            switch (results.response.index) {
                case 0:
                    session.userData.nextStep = 'end';
                    session.send('üí° –ß—Ç–æ–±—ã **–≤—ã–±—Ä–∞—Ç—å** —Ç–æ–≤–∞—Ä - **–Ω–∞–∂–º–∏—Ç–µ** –∫–Ω–æ–ø–∫—É **"–ö—É–ø–∏—Ç—å"** –ø–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–æ–º');
                    builder.Prompts.text(session, ' ');
                    break;
                case 1:
                    session.send('üòâ **–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ** —Å–Ω–æ–≤–∞, –∫–∞–∫ –ø—Ä–æ–≥–æ–ª–æ–¥–∞–µ—Ç–µ—Å—å!');
                    session.beginDialog('SecondMenu');
                    break;
            }
        } else {
            session.send('üòâ **–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ** —Å–Ω–æ–≤–∞, –∫–∞–∫ –ø—Ä–æ–≥–æ–ª–æ–¥–∞–µ—Ç–µ—Å—å!');
            session.beginDialog('SecondMenu');
        }
    },
    (session) => {
        session.send('üòâ **–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ** —Å–Ω–æ–≤–∞, –∫–∞–∫ –ø—Ä–æ–≥–æ–ª–æ–¥–∞–µ—Ç–µ—Å—å!');
        session.beginDialog('SecondMenu');
    }
])

bot.dialog('buyWithCrypto', [
    (session) => {
        console.log(session.message.text.substring(3, session.message.text.length));
        var orderNum = session.message.text.substring(3, session.message.text.length);
        session.userData.orderNum = orderNum;
        getBal(session, (balances) => {
            session.send(balances);
            db.findProductByNum(session.userData.orderNum, (product) => {
                session.userData.price = product.price;
                let msg = '–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ - **' + product.price + '** RUB\n\n\0\n\n' +
                    '**–í—ã–±–µ—Ä–∏—Ç–µ** –≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã'
                builder.Prompts.choice(session, msg, Objects.currency);
            });
        });
    },
    (session, results, next) => {
        if (results.response.entity == '–û—Ç–º–µ–Ω–∞') {
            session.userData.cancelOrder = true;
            session.Prompts.choice(session, '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–∫—É–ø–∫—É.\n\n\0\n\n‚Ü©Ô∏è **–í–µ—Ä–Ω—É—Ç—å—Å—è** –≤ –º–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤?', '–î–∞|–ù–µ—Ç', {
                listStyle: builder.ListStyle.button
            });
        } else {
            session.userData.currency = Objects.currency[results.response.entity];
            next();
        }
    },
    (session, results, next) => {
        if (session.userData.cancelOrder == true) {
            switch (results.response.index) {
                case 0:
                    session.beginDialog('marketplace');
                    break;
                case 1:
                    session.beginDialog('SecondMenu');
                    break;
            }
        } else {
            next();
        }
    },
    (session, results) => {

        db.findProductByNum(session.userData.orderNum, (product) => {
            session.userData.rubPrice = product.price;

            db.findUser(session.message.user.id, (account) => {
                console.log(account);
                Waves.getBalance(session, account.address, session.userData.currency.assetID, session.userData.currency.ticker, (balance, rub) => {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
                    if (balance <= 0) {
                        session.send('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞');
                        session.beginDialog('SecondMenu');
                        return;
                    }

                    function syncCheck(callback) {
                        var balanceSubComission;
                        if (session.userData.currency.assetID == 'WAVES') {
                            balanceSubComission = balance - 0.001;
                            callback(balanceSubComission);
                        } else {
                            Waves.checkWavesBalance(account.address, (wavesBalance) => {
                                balanceSubComission = wavesBalance - 0.001;
                                callback(balanceSubComission);
                            });
                        }
                    }


                    syncCheck((balanceSubComission) => {
                        // –ü—Ä–æ–≤–µ—Ä—è–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–æ–º–∏—Å—Å–∏—é
                        if (balanceSubComission < 0) {
                            session.send('–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ WAVES –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏.');
                            session.beginDialog('SecondMenu');
                            return;
                        }

                        // –ö—É—Ä—Å
                        session.userData.price = rub;
                        // –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö –ø–æ –∫—É—Ä—Å—É
                        session.userData.priceInRub = balance * rub;
                        if (session.userData.rubPrice > session.userData.priceInRub) {
                            session.userData.isError = true;
                            session.send('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞');
                            builder.Prompts.choice(session, '–í—ã –∂–µ–ª–∞–µ—Ç–µ **–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫—É** –∑–∞ –†—É–±–ª–∏?', '–î–∞|–ù–µ—Ç', {
                                listStyle: builder.ListStyle.button
                            });

                        } else {
                            let sumToPay = Number(session.userData.rubPrice / rub).toFixed(8);
                            session.userData.sumToPay = sumToPay;
                            session.send('–° –≤–∞—à–µ–≥–æ —Å—á—ë—Ç —Å–ø–∏—à–µ—Ç—Å—è ' + sumToPay + ' ' + session.userData.currency.ticker);
                            builder.Prompts.text(session, '–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—É—é —Å—É–º–º—É');
                            session.userData.isError = false;
                        }
                    });
                });
            });
        });
    },
    (session, results) => {
        // –¢—É—Ç –ª–∏–±–æ —á–µ–ª–æ–≤–µ–∫ –ø–æ–∫—É–ø–∞–µ—Ç, –ª–∏–±–æ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –≤–æ—Ä–æ–Ω–∫—É
        if (session.userData.isError != true) {
            var re = new RegExp('.', '');

            var sum;

            //–ú–µ–Ω—è–µ–º —Ç–æ—á–∫—É –Ω–∞ –∑–∞–ø—è—Ç—É—é
            if (results.response.search(re) == 0) {
                sum = Number(results.response.replace(',', "."));
            }

            if (sum != session.userData.sumToPay) {
                session.send('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é —Å—É–º–º—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑');
                session.userData.isError == true;
            } else {
                db.findUser(session.message.user.id, (account) => {
                    var address1 = account.address;

                    // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º Seed
                    const seed = Waves.wavesAccount(session.message.user.id, 'decryptSeed', account.encrSeed);

                    var sumPeresilka = Number((session.userData.sumToPay) * Math.pow(10, session.userData.stepen)).toFixed(0);

                    Waves.transfer('3PBnAFVV8AWyXMw4pSq4EQHibnVZMFHtcGw', session.userData.currency.assetID, sumPeresilka, seed.keyPair)
                        .then(
                            (responseData) => {
                                console.log(responseData);
                                session.send('–ü–µ—Ä–µ–≤–æ–¥ –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ! –û–∂–∏–¥–∞–π—Ç–µ, –≤–∞–º –Ω–∞–ø–∏—à—É—Ç –≤ Telegram ‚òëÔ∏è')
                                session.beginDialog('SecondMenu');
                            }
                        )
                        .catch(
                            (err) => {
                                console.log(err);
                                session.send('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ –∫–∞–∫–∏–º-—Ç–æ –ø—Ä–∏—á–∏–Ω–∞–º –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –±—ã–ª —Å–æ–≤–µ—Ä—à—ë–Ω.');
                                session.beginDialog('SecondMenu');
                            }
                        )
                });
            }
        } else {
            session.beginDialog('SecondMenu');
        }
    }
]).triggerAction({
    matches: /^num/
});

// –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
bot.dialog('addProduct', [
    (session) => {
        session.send(
            '‚úÖ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ **–¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç –≤ Marketplace.**\n\n' +
            '–ü–æ—Å–ª–µ –µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç **—É–≤–∏–¥–µ—Ç—å –≤–∞—à —Ç–æ–≤–∞—Ä –∏ –∫—É–ø–∏—Ç—å –µ–≥–æ –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—É—é —Ü–µ–Ω—É.**'
        );
        builder.Prompts.text(session, '1Ô∏è‚É£ –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ **–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.**');
    },
    (session, results) => {
        session.userData.pizzaName = results.response;
        builder.Prompts.text(session, '2Ô∏è‚É£ –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ **–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ**');
    },
    (session, results) => {
        session.userData.pizzaShortDescription = results.response;
        builder.Prompts.text(session, '3Ô∏è‚É£ –ò **–ø–æ–¥—Ä–æ–±–Ω–æ–µ**');
    },
    (session, results) => {
        session.userData.pizzaDescription = results.response;
        builder.Prompts.number(session, '4Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ **—Ü–µ–Ω—É**');
    },
    (session, results) => {
        session.userData.pizzaPrice = results.response;
        builder.Prompts.choice(session, '5Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ **—ç–º–æ—Ü–∏–∏**, –≤–º–µ—Å—Ç–µ —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–æ–¥—É–∫—Ç\n\n‚ùóÔ∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –Ω–µ –±–æ–ª–µ–µ 3-—Ö —ç–º–æ—Ü–∏–π', Objects.emotionPack);
    },
    (session, results, next) => {
        console.log(results.response.entity)
        if (results.response.entity == '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç') {
            session.userData.toAdd = true;
            next();
            return;
        }
        session.userData.emotions = [Objects.emotionPack[results.response.entity]];
        let gegus = {};
        let nextEmotion = Object.assign(gegus, Objects.emotionPack);
        delete nextEmotion[results.response.entity];
        session.userData.noDelEmotions = nextEmotion;
        builder.Prompts.choice(session, '–í—ã–±–µ—Ä–∏—Ç–µ –µ—â—ë —ç–º–æ—Ü–∏—é –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞\n\n‚ùóÔ∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –Ω–µ –±–æ–ª–µ–µ 3-—Ö —ç–º–æ—Ü–∏–π', nextEmotion);
    },
    (session, results, next) => {
        if (session.userData.toAdd != undefined || results.response.entity == '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç') {
            session.userData.toAdd = true;
            next();
            return;
        }
        session.userData.emotions.push(Objects.emotionPack[results.response.entity]);
        let gegus = {};
        let nextEmotion = Object.assign(gegus, Objects.emotionPack);
        delete nextEmotion[results.response.entity];
        session.userData.noDelEmotions = nextEmotion;
        builder.Prompts.choice(session, '–í—ã–±–µ—Ä–∏—Ç–µ –µ—â—ë —ç–º–æ—Ü–∏—é –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞\n\n‚ùóÔ∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –Ω–µ –±–æ–ª–µ–µ 3-—Ö —ç–º–æ—Ü–∏–π', nextEmotion);
    },
    (session, results, next) => {
        if (session.userData.toAdd != undefined || results.response.entity == '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç') {

        } else {
            session.userData.emotions.push(Objects.emotionPack[results.response.entity]);
        }

        builder.Prompts.attachment(session, '6Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ **–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞**');
    },
    (session, results) => {
        session.userData.pizzaImage = results.response[0].contentUrl;
        session.send('‚è© –ò—Ç–∞–∫, –≤–∞—à —Ç–æ–≤–∞—Ä **–±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º** ');
        let card = Cards.createPizzaCard(
            session,
            session.userData.pizzaName,
            session.userData.pizzaShortDescription,
            session.userData.pizzaDescription,
            session.userData.pizzaPrice,
            session.userData.pizzaImage,
            false
        );
        let msg = new builder.Message(session).addAttachment(card);
        session.send(msg);
        builder.Prompts.choice(session, '**‚è© –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ üõí Marketplace?**', '–î–∞|–ù–µ—Ç', {
            listStyle: builder.ListStyle.button
        });
    },
    (session, results) => {
        switch (results.response.index) {
            case 0:
                db.addProduct(
                    session.message.user.id,
                    session.userData.pizzaName,
                    session.userData.pizzaShortDescription,
                    session.userData.pizzaDescription,
                    session.userData.pizzaPrice,
                    session.userData.pizzaImage,
                    session.userData.emotions,
                    (done) => {
                        if (done == true) {
                            session.send('–í–∞—à –ø—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ Marketplace!');
                            session.beginDialog('SecondMenu');
                        }
                    }
                )
                break;
            case 1:
                session.send('–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ç–æ–≤–∞—Ä –≤ Marketplace');
                session.beginDialog('SecondMenu');
                break;
        }
    }
]);

bot.dialog('marketplace', [
    (session) => {
        db.findProducts(
            (products) => {
                session.send(
                    'üçí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **Marketplace**!'
                );
                for (let i in products) {
                    if (products.length != 0) {
                        let card = Cards.createPizzaCard(
                            session,
                            products[i].name,
                            products[i].shortDescription,
                            products[i].description,
                            products[i].price,
                            products[i].image,
                            true,
                            products[i].num
                        );
                        let msg = new builder.Message(session).addAttachment(card);
                        session.send(msg);
                    } else {
                        session.send('‚ö°Ô∏è –°—Ç–∞–Ω—å—Ç–µ **–ø–µ—Ä–≤—ã–º**, –∫—Ç–æ –¥–æ–±–∞–≤–∏—Ç –ø—Ä–æ–¥—É–∫—Ç –≤ Marketplace!\n\n–î–ª—è —ç—Ç–æ–≥–æ **–ø–µ—Ä–µ–π–¥–∏—Ç–µ** –≤ –º–µ–Ω—é **"üíº –ü–∞—Ä—Ç–Ω—ë—Ä–∞–º"**');
                    }
                }
                // –í–û–†–û–ù–ö–ê –ü–†–û–î–ê–ñ
                builder.Prompts.choice(session, '‚ùì –í—ã –≤—ã–±—Ä–∞–ª–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å **–≤–∫—É—Å–Ω–æ–µ**?', 'üòã –î–∞|ü§î –ï—â—ë –ø–æ–¥—É–º–∞—é', {
                    listStyle: builder.ListStyle.button
                });
            }
        )
    },
    (session, results, next) => {
        switch (results.response.index) {
            case 0:
                session.send('üéâ –ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! **–ù–∞–∂–º–∏—Ç–µ** –∫–Ω–æ–ø–∫—É **"–ö—É–ø–∏—Ç—å"**üòä');
                builder.Prompts.text(session, ' ');
                break;
            case 1:
                session.send('üòâ **–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ** —Å–Ω–æ–≤–∞, –∫–∞–∫ –ø—Ä–æ–≥–æ–ª–æ–¥–∞–µ—Ç–µ—Å—å!');
                session.beginDialog('SecondMenu');
                break;
        }
    },
    (session, results) => {
        if (results.response != '–∫—É–ø–∏—Ç—å' && results.response != '–ö—É–ø–∏—Ç—å' && results.response != '–ö–£–ü–ò–¢–¨') {
            session.userData.nextStep = 'next';
            builder.Prompts.choice(session, 'ü§î –í—ã **–≤—ã–±—Ä–∞–ª–∏** —á—Ç–æ-–Ω–∏–±—É–¥—å?', '–î–∞!|–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç', {
                listStyle: builder.ListStyle.button
            });
        } else {
            session.userData.nextStep = 'end';
            session.send('üí° –ß—Ç–æ–±—ã **–≤—ã–±—Ä–∞—Ç—å** —Ç–æ–≤–∞—Ä - **–Ω–∞–∂–º–∏—Ç–µ** –∫–Ω–æ–ø–∫—É **"–ö—É–ø–∏—Ç—å"** –ø–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–æ–º');
            builder.Prompts.text(session, ' ');
        }
    },
    (session, results) => {
        if (session.userData.nextStep == 'next') {
            switch (results.response.index) {
                case 0:
                    session.userData.nextStep = 'end';
                    session.send('üí° –ß—Ç–æ–±—ã **–≤—ã–±—Ä–∞—Ç—å** —Ç–æ–≤–∞—Ä - **–Ω–∞–∂–º–∏—Ç–µ** –∫–Ω–æ–ø–∫—É **"–ö—É–ø–∏—Ç—å"** –ø–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–æ–º');
                    builder.Prompts.text(session, ' ');
                    break;
                case 1:
                    session.send('üòâ **–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ** —Å–Ω–æ–≤–∞, –∫–∞–∫ –ø—Ä–æ–≥–æ–ª–æ–¥–∞–µ—Ç–µ—Å—å!');
                    session.beginDialog('SecondMenu');
                    break;
            }
        } else {
            session.send('üòâ **–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ** —Å–Ω–æ–≤–∞, –∫–∞–∫ –ø—Ä–æ–≥–æ–ª–æ–¥–∞–µ—Ç–µ—Å—å!');
            session.beginDialog('SecondMenu');
        }
    },
    (session) => {
        session.send('üòâ **–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ** —Å–Ω–æ–≤–∞, –∫–∞–∫ –ø—Ä–æ–≥–æ–ª–æ–¥–∞–µ—Ç–µ—Å—å!');
        session.beginDialog('SecondMenu');
    }
]);

var intents = new builder.IntentDialog({
        recognizers: [recognizer]
    })
    .matches('Greeting', (session) => {
        // session.send('You reached Greeting intent, you said \'%s\'.', session.message.text);
    })
    .matches('Help', (session) => {
        // session.send('You reached Help intent, you said \'%s\'.', session.message.text);
    })
    .matches('Cancel', (session) => {
        // session.send('You reached Cancel intent, you said \'%s\'.', session.message.text); 
    })
    .matches('Eat', (session) => {
        // session.send('You reached Eat intent, you said \'%s\'.', session.message.text);
        session.beginDialog('getAtach');
    })
    .onDefault((session) => {
        // session.send('Sorry, I did not understand \'%s\'.', session.message.text);
    });

bot.beginDialogAction('getAtach', 'Eat');