package main

import (
	"fmt"
	"log"
	"math"
	"strconv"
	"time"

	"gopkg.in/mgo.v2/bson"

	"gopkg.in/mgo.v2"

	"./course"
	"./ethereum"
	"./mongo"
	"./orglist"
	"./userlogic"
	"github.com/tidwall/gjson"
	tb "gopkg.in/tucnak/telebot.v2"
)

// –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
var fond = ""
var sum = ""
var concurrency = ""
var rubsum = ""

var courseJSON []byte
var courseResult gjson.Result

var wavesBalanceResult gjson.Result
var currencyBalanceResult gjson.Result

var session *mgo.Session

// –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç—Ä–∞—è –ø–æ—Å—ã–ª–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Å–º–∞—Ä—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç
func vote(prvtKey string, proposalID string, vote string) string {
	data := ethereum.VoteForProposal(prvtKey, proposalID, vote)
	msg := ""
	if data != "false" {
		if vote == "true" {
			msg += "–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ *–ó–∞*, –≤–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!\n\n"
		} else {
			msg += "–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ *–ü—Ä–æ—Ç–∏–≤*, –≤–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!\n\n"
		}

		msg += "–í—ã –º–æ–∂–µ—Ç–µ *–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é* –ø–æ –∞–¥—Ä–µ—Å—É: " + data
		return msg
	} else {
		msg += "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≥–æ–ª–æ—Å–≤–∞—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≥–æ–ª–æ—Å–∞."
		return msg
	}
}

func main() {
	b, err := tb.NewBot(tb.Settings{
		// Token: "576497547:AAFqeiPb5j5fVktRPqtzpTvaIp8ExKlZZAY", //–ø—Ä–æ–¥–∞–∫—à–Ω @bf_charity_bot
		// Token: "525513661:AAEdYAbizNP8SiT2fhjweHRZULFL84KsUYk", //–ù–∏–∫–∏—Ç–∞ @botGoTestBot.
		Token:  "539909670:AAFk7Lxz73lTbtfjf8xIReCwSoEZZpjAlqI", //–ö–∏—Ä–∏–ª–ª @kirillBotGo_bot
		Poller: &tb.LongPoller{Timeout: 10 * time.Second},
	})

	session = mongo.ConnectToMongo()
	foundation := mongo.FindFoundationByID(session, bson.ObjectIdHex("5abfaa468173e1b2e81fb2b2"))
	voteByFoundation, isTrue := mongo.FindVoteByFoundationID(session, foundation.ID)
	fmt.Print(isTrue)
	users := mongo.FindAllVotersAddrByVoteID(session, voteByFoundation.ID)
	var usersID string
	for key := range users {
		user := mongo.FindUserByID(session, users[key].UserID)
		usersID += user.UserID
		if key != len(users)-1 {
			usersID += ","
		} else {

		}
	}
	// fmt.Print(usersID)
	var foundationID = bson.ObjectId(foundation.ID).Hex()
	fmt.Print(foundationID)

	// –°–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
	// mongo.CreateVoteAndSendNot(session, usersID, "0x6D377De54Bde59c6a4B0fa15Cb2EFB84BB32D433", foundation.Name, "200000", "1", foundationID, foundation.Mission, "–ö—É–ø–∏—Ç—å –¥–µ—Ç—è–º –±–∏–ª–µ—Ç—ã –≤ —Ç–µ–∞—Ç—Ä", "1524959999")

	replyBtn1 := tb.ReplyButton{Text: "üí≥ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç"}
	replyBtn2 := tb.ReplyButton{Text: "üí∏ –°–ø–∏—Å–æ–∫ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π"}
	replyKeys := [][]tb.ReplyButton{
		[]tb.ReplyButton{replyBtn1},
		[]tb.ReplyButton{replyBtn2},
	}
	inlineBtn0 := tb.InlineButton{Unique: "0", Text: "0Ô∏è‚É£"}
	inlineBtn1 := tb.InlineButton{Unique: "1", Text: "1Ô∏è‚É£"}
	inlineBtn2 := tb.InlineButton{Unique: "2", Text: "2Ô∏è‚É£"}
	inlineBtn3 := tb.InlineButton{Unique: "3", Text: "3Ô∏è‚É£"}
	inlineBtn4 := tb.InlineButton{Unique: "4", Text: "4Ô∏è‚É£"}
	inlineBtn5 := tb.InlineButton{Unique: "5", Text: "5Ô∏è‚É£"}
	inlineBtn6 := tb.InlineButton{Unique: "6", Text: "6Ô∏è‚É£"}
	// inlineBtn7 := tb.InlineButton{Unique: "7", Text: "7Ô∏è‚É£"}
	// inlineBtn8 := tb.InlineButton{Unique: "8", Text: "8Ô∏è‚É£"}

	inlineKbrdCalc := [][]tb.InlineButton{
		{inlineBtn0, inlineBtn1, inlineBtn2, inlineBtn3, inlineBtn4, inlineBtn5, inlineBtn6},
	}

	inlineInv := tb.InlineButton{Unique: "inv", Text: "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏"}
	inlineInvMenu := [][]tb.InlineButton{
		{inlineInv},
	}
	// NT
	// var inlineYes []tb.InlineButton
	// var inlineNo []tb.InlineButton
	// for i := 0; i < 25; i++ {
	// 	fmt.Print(`
	// 	b.Handle(&voteButtonYes` + strconv.Itoa(i) + `, func(c *tb.Callback) {
	//
	// 		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
	// 		b.Respond(c, &tb.CallbackResponse{})
	// 	})
	// 	b.Handle(&voteButtonNo` + strconv.Itoa(i) + `, func(c *tb.Callback) {
	//
	// 		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
	// 		b.Respond(c, &tb.CallbackResponse{})
	// 	})
	// 	`)
	// }

	// var inlineKbrdyesno [][]tb.InlineButton
	// NT
	inlineklav0 := tb.InlineButton{Unique: "klav0", Text: "0Ô∏è‚É£"}
	inlineklav1 := tb.InlineButton{Unique: "klav1", Text: "1Ô∏è‚É£"}
	inlineklav2 := tb.InlineButton{Unique: "klav2", Text: "2Ô∏è‚É£"}
	inlineklav3 := tb.InlineButton{Unique: "klav3", Text: "3Ô∏è‚É£"}
	inlineklav4 := tb.InlineButton{Unique: "klav4", Text: "4Ô∏è‚É£"}
	inlineklav5 := tb.InlineButton{Unique: "klav5", Text: "5Ô∏è‚É£"}
	inlineklav6 := tb.InlineButton{Unique: "klav6", Text: "6Ô∏è‚É£"}
	inlineklav7 := tb.InlineButton{Unique: "klav7", Text: "7Ô∏è‚É£"}
	inlineklav8 := tb.InlineButton{Unique: "klav8", Text: "8Ô∏è‚É£"}
	inlineklav9 := tb.InlineButton{Unique: "klav9", Text: "9Ô∏è‚É£"}
	inlineklavdot := tb.InlineButton{Unique: "klavdot", Text: " . "}
	inlineklavapply := tb.InlineButton{Unique: "enter", Text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"}
	inlineklavrenew := tb.InlineButton{Unique: "renew", Text: "üÜï –ó–∞–Ω–æ–≤–æ"}
	inlineklavback := tb.InlineButton{Unique: "remove", Text: "‚ùå –ù–∞–∑–∞–¥"}
	inlineklavdellast := tb.InlineButton{Unique: "last", Text: "‚¨ÖÔ∏è"}
	inlineKbrdsum := [][]tb.InlineButton{
		{inlineklav1, inlineklav2, inlineklav3}, {inlineklav4, inlineklav5, inlineklav6},
		{inlineklav7, inlineklav8, inlineklav9}, {inlineklavdot, inlineklav0, inlineklavdellast},
		{inlineklavrenew, inlineklavback}, {inlineklavapply},
	}

	// –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≥–æ–ª–æ—Å–≤–∞–Ω–∏–π
	voteButtonYes0 := tb.InlineButton{Unique: "yes0", Text: "‚úÖ –î–∞, —è –∑–∞"}
	voteButtonNo0 := tb.InlineButton{Unique: "no0", Text: "‚ùå –ù–µ—Ç, —è –ø—Ä–æ—Ç–∏–≤"}

	voteButtonYes1 := tb.InlineButton{Unique: "yes1", Text: "‚úÖ –î–∞, —è –∑–∞"}
	voteButtonNo1 := tb.InlineButton{Unique: "no1", Text: "‚ùå –ù–µ—Ç, —è –ø—Ä–æ—Ç–∏–≤"}

	voteButtonYes2 := tb.InlineButton{Unique: "yes2", Text: "‚úÖ –î–∞, —è –∑–∞"}
	voteButtonNo2 := tb.InlineButton{Unique: "no2", Text: "‚ùå –ù–µ—Ç, —è –ø—Ä–æ—Ç–∏–≤"}

	voteButtonYes3 := tb.InlineButton{Unique: "yes3", Text: "‚úÖ –î–∞, —è –∑–∞"}
	voteButtonNo3 := tb.InlineButton{Unique: "no3", Text: "‚ùå –ù–µ—Ç, —è –ø—Ä–æ—Ç–∏–≤"}

	voteButtonYes4 := tb.InlineButton{Unique: "yes4", Text: "‚úÖ –î–∞, —è –∑–∞"}
	voteButtonNo4 := tb.InlineButton{Unique: "no4", Text: "‚ùå –ù–µ—Ç, —è –ø—Ä–æ—Ç–∏–≤"}

	voteButtonYes5 := tb.InlineButton{Unique: "yes5", Text: "‚úÖ –î–∞, —è –∑–∞"}
	voteButtonNo5 := tb.InlineButton{Unique: "no5", Text: "‚ùå –ù–µ—Ç, —è –ø—Ä–æ—Ç–∏–≤"}

	voteButtonYes6 := tb.InlineButton{Unique: "yes6", Text: "‚úÖ –î–∞, —è –∑–∞"}
	voteButtonNo6 := tb.InlineButton{Unique: "no6", Text: "‚ùå –ù–µ—Ç, —è –ø—Ä–æ—Ç–∏–≤"}

	voteButtonYes7 := tb.InlineButton{Unique: "yes7", Text: "‚úÖ –î–∞, —è –∑–∞"}
	voteButtonNo7 := tb.InlineButton{Unique: "no7", Text: "‚ùå –ù–µ—Ç, —è –ø—Ä–æ—Ç–∏–≤"}

	voteButtonYes8 := tb.InlineButton{Unique: "yes8", Text: "‚úÖ –î–∞, —è –∑–∞"}
	voteButtonNo8 := tb.InlineButton{Unique: "no8", Text: "‚ùå –ù–µ—Ç, —è –ø—Ä–æ—Ç–∏–≤"}

	voteButtonYes9 := tb.InlineButton{Unique: "yes9", Text: "‚úÖ –î–∞, —è –∑–∞"}
	voteButtonNo9 := tb.InlineButton{Unique: "no9", Text: "‚ùå –ù–µ—Ç, —è –ø—Ä–æ—Ç–∏–≤"}

	voteButtonYes10 := tb.InlineButton{Unique: "yes10", Text: "‚úÖ –î–∞, —è –∑–∞"}
	voteButtonNo10 := tb.InlineButton{Unique: "no10", Text: "‚ùå –ù–µ—Ç, —è –ø—Ä–æ—Ç–∏–≤"}

	voteButtonYes11 := tb.InlineButton{Unique: "yes11", Text: "‚úÖ –î–∞, —è –∑–∞"}
	voteButtonNo11 := tb.InlineButton{Unique: "no11", Text: "‚ùå –ù–µ—Ç, —è –ø—Ä–æ—Ç–∏–≤"}

	voteButtonYes12 := tb.InlineButton{Unique: "yes12", Text: "‚úÖ –î–∞, —è –∑–∞"}
	voteButtonNo12 := tb.InlineButton{Unique: "no12", Text: "‚ùå –ù–µ—Ç, —è –ø—Ä–æ—Ç–∏–≤"}

	voteButtonYes13 := tb.InlineButton{Unique: "yes13", Text: "‚úÖ –î–∞, —è –∑–∞"}
	voteButtonNo13 := tb.InlineButton{Unique: "no13", Text: "‚ùå –ù–µ—Ç, —è –ø—Ä–æ—Ç–∏–≤"}

	voteButtonYes14 := tb.InlineButton{Unique: "yes14", Text: "‚úÖ –î–∞, —è –∑–∞"}
	voteButtonNo14 := tb.InlineButton{Unique: "no14", Text: "‚ùå –ù–µ—Ç, —è –ø—Ä–æ—Ç–∏–≤"}

	voteButtonYes15 := tb.InlineButton{Unique: "yes15", Text: "‚úÖ –î–∞, —è –∑–∞"}
	voteButtonNo15 := tb.InlineButton{Unique: "no15", Text: "‚ùå –ù–µ—Ç, —è –ø—Ä–æ—Ç–∏–≤"}

	voteButtonYes16 := tb.InlineButton{Unique: "yes16", Text: "‚úÖ –î–∞, —è –∑–∞"}
	voteButtonNo16 := tb.InlineButton{Unique: "no16", Text: "‚ùå –ù–µ—Ç, —è –ø—Ä–æ—Ç–∏–≤"}

	voteButtonYes17 := tb.InlineButton{Unique: "yes17", Text: "‚úÖ –î–∞, —è –∑–∞"}
	voteButtonNo17 := tb.InlineButton{Unique: "no17", Text: "‚ùå –ù–µ—Ç, —è –ø—Ä–æ—Ç–∏–≤"}

	voteButtonYes18 := tb.InlineButton{Unique: "yes18", Text: "‚úÖ –î–∞, —è –∑–∞"}
	voteButtonNo18 := tb.InlineButton{Unique: "no18", Text: "‚ùå –ù–µ—Ç, —è –ø—Ä–æ—Ç–∏–≤"}

	voteButtonYes19 := tb.InlineButton{Unique: "yes19", Text: "‚úÖ –î–∞, —è –∑–∞"}
	voteButtonNo19 := tb.InlineButton{Unique: "no19", Text: "‚ùå –ù–µ—Ç, —è –ø—Ä–æ—Ç–∏–≤"}

	voteButtonYes20 := tb.InlineButton{Unique: "yes20", Text: "‚úÖ –î–∞, —è –∑–∞"}
	voteButtonNo20 := tb.InlineButton{Unique: "no20", Text: "‚ùå –ù–µ—Ç, —è –ø—Ä–æ—Ç–∏–≤"}

	voteButtonYes21 := tb.InlineButton{Unique: "yes21", Text: "‚úÖ –î–∞, —è –∑–∞"}
	voteButtonNo21 := tb.InlineButton{Unique: "no21", Text: "‚ùå –ù–µ—Ç, —è –ø—Ä–æ—Ç–∏–≤"}

	voteButtonYes22 := tb.InlineButton{Unique: "yes22", Text: "‚úÖ –î–∞, —è –∑–∞"}
	voteButtonNo22 := tb.InlineButton{Unique: "no22", Text: "‚ùå –ù–µ—Ç, —è –ø—Ä–æ—Ç–∏–≤"}

	voteButtonYes23 := tb.InlineButton{Unique: "yes23", Text: "‚úÖ –î–∞, —è –∑–∞"}
	voteButtonNo23 := tb.InlineButton{Unique: "no23", Text: "‚ùå –ù–µ—Ç, —è –ø—Ä–æ—Ç–∏–≤"}

	voteButtonYes24 := tb.InlineButton{Unique: "yes24", Text: "‚úÖ –î–∞, —è –∑–∞"}
	voteButtonNo24 := tb.InlineButton{Unique: "no24", Text: "‚ùå –ù–µ—Ç, —è –ø—Ä–æ—Ç–∏–≤"}

	buttonYesNoArr := [][][]tb.InlineButton{
		[][]tb.InlineButton{
			{voteButtonYes0, voteButtonNo0},
		},

		[][]tb.InlineButton{
			{voteButtonYes1, voteButtonNo1},
		},

		[][]tb.InlineButton{
			{voteButtonYes2, voteButtonNo2},
		},

		[][]tb.InlineButton{
			{voteButtonYes3, voteButtonNo3},
		},

		[][]tb.InlineButton{
			{voteButtonYes4, voteButtonNo4},
		},

		[][]tb.InlineButton{
			{voteButtonYes5, voteButtonNo5},
		},

		[][]tb.InlineButton{
			{voteButtonYes6, voteButtonNo6},
		},

		[][]tb.InlineButton{
			{voteButtonYes7, voteButtonNo7},
		},

		[][]tb.InlineButton{
			{voteButtonYes8, voteButtonNo8},
		},

		[][]tb.InlineButton{
			{voteButtonYes9, voteButtonNo9},
		},

		[][]tb.InlineButton{
			{voteButtonYes10, voteButtonNo10},
		},

		[][]tb.InlineButton{
			{voteButtonYes11, voteButtonNo11},
		},

		[][]tb.InlineButton{
			{voteButtonYes12, voteButtonNo12},
		},

		[][]tb.InlineButton{
			{voteButtonYes13, voteButtonNo13},
		},

		[][]tb.InlineButton{
			{voteButtonYes14, voteButtonNo14},
		},

		[][]tb.InlineButton{
			{voteButtonYes15, voteButtonNo15},
		},

		[][]tb.InlineButton{
			{voteButtonYes16, voteButtonNo16},
		},

		[][]tb.InlineButton{
			{voteButtonYes17, voteButtonNo17},
		},

		[][]tb.InlineButton{
			{voteButtonYes18, voteButtonNo18},
		},

		[][]tb.InlineButton{
			{voteButtonYes19, voteButtonNo19},
		},

		[][]tb.InlineButton{
			{voteButtonYes20, voteButtonNo20},
		},

		[][]tb.InlineButton{
			{voteButtonYes21, voteButtonNo21},
		},

		[][]tb.InlineButton{
			{voteButtonYes22, voteButtonNo22},
		},

		[][]tb.InlineButton{
			{voteButtonYes23, voteButtonNo23},
		},

		[][]tb.InlineButton{
			{voteButtonYes24, voteButtonNo24},
		},
	}
	// for i := 0; i < 25; i++ {
	// 	fmt.Print(`
	// voteButtonYes` + strconv.Itoa(i) + ` := tb.InlineButton{Unique: "yes` + strconv.Itoa(i) + `", Text: "‚úÖ –î–∞, —è –∑–∞"}
	// voteButtonNo` + strconv.Itoa(i) + ` := tb.InlineButton{Unique: "no` + strconv.Itoa(i) + `", Text: "‚ùå –ù–µ—Ç, —è –ø—Ä–æ—Ç–∏–≤"}
	// inlineKbrdYesNo` + strconv.Itoa(i) + ` := [][]tb.InlineButton{
	// 	{voteButtonYes` + strconv.Itoa(i) + `, voteButtonNo` + strconv.Itoa(i) + `},
	// }
	// `)
	// }

	inlin—Évapply := tb.InlineButton{Unique: "apply", Text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"}
	inlineKbrdaply := [][]tb.InlineButton{{inlin—Évapply}}

	// inlineBtnWAV := tb.InlineButton{Unique: "WAVES", Text: "üìà WAVES"}
	// inlineBtnBTC := tb.InlineButton{Unique: "BTC", Text: "üìà BTC"}
	inlineBtnETH := tb.InlineButton{Unique: "ETH", Text: "üìà ETH"}
	// inlineBtnLTC := tb.InlineButton{Unique: "LTC", Text: "üìà LTC"}
	inlineCurrency := [][]tb.InlineButton{{inlineBtnETH}}

	inlineData := tb.InlineButton{Unique: "Data", Text: "üîê –ê–∫–∫–∞—É–Ω—Ç"}
	inlineList := tb.InlineButton{Unique: "List", Text: "üéà –°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π"}
	inlineVote := tb.InlineButton{Unique: "curvote", Text: "„ÄΩÔ∏è –¢–µ–∫—É—â–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"}

	inlineCurrencys := [][]tb.InlineButton{
		{inlineData}, {inlineList}, {inlineVote},
	}

	if err != nil {
		log.Fatal(err)
		return
	}

	b.Handle("/start", func(m *tb.Message) {

		/// –¢–£–¢ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï NT
		// var orgname = ""
		// var orgsum = ""
		// var orgmsg = ""
		// var msgorg = "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è "
		// msgorg += orgname + " "
		// msgorg += " —Ö–æ—á–µ—Ç –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å "
		// msgorg += orgsum + " –Ω–∞ "
		// msgorg += orgmsg
		// msgorg
		// inlineKbrdCalc –≤–æ—Ç —ç—Ç–æ –º–µ–Ω—é

		// b.Handle(&inlineYes, func(c *tb.Callback) {
		// 	var msg = "–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –ó–∞, –≤–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!"
		// 	b.Edit(c.Message, , &tb.SendOptions{ParseMode: "Markdown"})
		// 	b.Respond(c, &tb.CallbackResponse{})
		// })
		// b.Handle(&inlineNo, func(c *tb.Callback) {
		//
		// 	b.Edit(c.Message, , &tb.SendOptions{ParseMode: "Markdown"})
		// 	b.Respond(c, &tb.CallbackResponse{})
		// })

		/// –¢–£–¢ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï NT

		if !m.Private() {
			return
		}
		// logs
		var userID = strconv.Itoa(m.Sender.ID)
		var name = string(m.Sender.Username)
		var prvtKeyETH = ethereum.CreatePrvtKey()
		var addressETH = ethereum.GetAddress(prvtKeyETH)
		// println()
		// println(name)
		// println(prvtKeyETH)
		// println(addressETH)
		// println(userlogic.Auth(userID))
		if userlogic.Auth(session, userID) != true {
			userlogic.Register(session, userID, name, prvtKeyETH, addressETH)
			var msg = "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!\n\n"
			msg += "–í–∞—à *Private Key:* "
			msg += prvtKeyETH
			msg += "\n\n"
			msg += "–í–∞—à *Address:* "
			msg += addressETH
			b.Send(m.Sender, msg, &tb.SendOptions{DisableWebPagePreview: true, ParseMode: "Markdown"})
		}
		// len := len(mongo.FindUser(userID))
		// if len != 0 {
		// } else {
		// 	mongo.AddUser(userID, name, prvtKeyETH, addressETH)
		// }
		// println(len)
		// println("))))")
		// println(m.Sender.ID)
		// logs
		var text = "*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\nB *Charity* - —Å—Ç–∞–Ω–¥–∞—Ä—Ç —É—á–∞—Å—Ç–∏—è –≤ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.\n\n"
		text += "*1.* –í—ã–±–∏—Ä–∞–µ—à—å –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é\n"
		text += "*2.* –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–µ—à—å –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π  —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç\n"
		text += "*3.* –ü—Ä–∏–Ω–∏–º–∞–µ—à—å —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–µ –ø—Ä–æ–µ–∫—Ç–∞\n"
		text += "\n*–ü—Ä–∏–µ–º—É—â–µ—Å—Ç–≤–∞*\n\n"
		text += "*1.* *–ü—Ä—è–º–æ–π* –∏ *–±–µ–∑–æ–ø–∞—Å–Ω—ã–π* –ø–µ—Ä–µ–≤–æ–¥ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –±–µ–∑ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–≤\n"
		text += "*2.* *–ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–∞—Å—Ö–æ–¥–æ–≤* –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏\n"
		text += "*3.* –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å *–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—á–∞—Å—Ç–∏—è* –∏ —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å\n"
		b.Send(m.Sender, text, &tb.SendOptions{DisableWebPagePreview: true, ParseMode: "Markdown"}, &tb.ReplyMarkup{ReplyKeyboard: replyKeys})
	})
	// —Ç—É—Ç –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–ø–∏—Å–æ–∫ —Ñ–æ–Ω–¥–æ–≤ —Å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è–º–∏
	b.Handle(&replyBtn2, func(m *tb.Message) {
		b.Send(m.Sender, orglist.GetFoundations(session)[0], &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdCalc})
	})
	b.Handle(&replyBtn1, func(m *tb.Message) {
		user := mongo.FindUser(session, strconv.Itoa(m.Sender.ID))
		var eth = ethereum.GetBalance(user.EthAddress)
		//0x7fb5f775c04b42bdc7506404272a3845d6d2e6c0be1671b24bc242f9ea43912a
		println("–ë–∞–ª–∞–Ω—Å –≤ Ethereum: " + eth)
		ethufufuuufuuf, err := strconv.ParseFloat(eth, 64)
		if err != nil {
			println(eth)
		}
		var ethreal = ethufufuuufuuf
		println("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π –≤ Float: " + strconv.FormatFloat(ethreal, 'g', 8, 64))
		var thefuckingrealeth = strconv.FormatFloat(ethreal, 'g', 8, 64)
		var torub = course.Course("RUB")
		println("1 ETH: " + strconv.FormatFloat(1.0/(gjson.Get(string(torub), "ETH").Float())*ethreal, 'g', 8, 64))
		var torub3 = (1.0 / (gjson.Get(string(torub), "ETH").Float())) * ethreal
		var ethrub = strconv.FormatFloat(torub3, 'g', 8, 64)
		var msg = "*–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç* \n\n*–ë–∞–ª–∞–Ω—Å –ø–æ –≤–∞–ª—é—Ç–∞–º:*" + "\n\n`ETH:` " + thefuckingrealeth + " (" + ethrub + " RUB)"
		b.Send(m.Sender, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineCurrencys})
	})

	// —Ç—É—Ç –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–ø–∏—Å–æ–∫ —Ñ–æ–Ω–¥–æ–≤ —Å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è–º–∏

	// –ß–µ–∫–∞–µ–º –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –ª–∏—Å—Ç—ã –∏ –¥—Ä—É–≥–æ–µ
	b.Handle(&inlineData, func(c *tb.Callback) {
		user := mongo.FindUser(session, strconv.Itoa(c.Sender.ID))
		var address = (user.EthAddress)
		var key = (user.EthPrvKey)
		var msg1 = "–ú–æ–π *–∞–¥—Ä–µ—Å* ETH: " + address + "\n\n–ú–æ–π *Private key* " + key
		b.Send(c.Sender, msg1, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineList, func(c *tb.Callback) {
		// user := mongo.FindUser()
		var msg = ""
		user := mongo.FindUser(session, strconv.Itoa(c.Sender.ID))
		len := len(user.Foundations)
		//

		//
		if len == 0 {
			msg += "–í—ã –µ—â–µ –Ω–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–ª–∏ –≤ –∫–∞–∫—É—é-–ª–±–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é, –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Å–µ–π—á–∞—Å"
			b.Send(c.Sender, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdCalc})
		} else {
			msg += "–°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π, –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–ª–∏: \n"
			for index := range user.Foundations {
				// fmt.Print(user.Foundations[index].ID)
				fond := mongo.FindFoundationByID(session, user.Foundations[index].FoundationID)
				msg += "*" + fond.Name + "*" + ". –°—É–º–º–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è " + strconv.FormatFloat(user.Foundations[index].InvestInCurrency, 'g', 8, 64) + " ETH.\n\n"
			}

			b.Send(c.Sender, msg, &tb.SendOptions{ParseMode: "Markdown"})
		}

		b.Respond(c, &tb.CallbackResponse{})
	})
	var voteID []bson.ObjectId
	var userID bson.ObjectId
	b.Handle(&inlineVote, func(c *tb.Callback) {
		var msg = ""
		user := mongo.FindUser(session, strconv.Itoa(c.Sender.ID))
		userID = user.ID
		var usersFoundations []bson.ObjectId
		var isPovtoriajetsia bool
		if len(user.Foundations) != 0 {
			for key := range user.Foundations {
				for b := range usersFoundations {
					if usersFoundations[b] == user.Foundations[key].FoundationID {
						isPovtoriajetsia = true
					}
				}

				if isPovtoriajetsia == true {
					continue
				}
				usersFoundations = append(usersFoundations, user.Foundations[key].FoundationID)
				fond := mongo.FindFoundationByID(session, (user.Foundations[key].FoundationID))

				fondsVotes := mongo.FindVotesByFoundationID(session, user.Foundations[key].FoundationID)

				for i := range fondsVotes {
					currentTimeUts := int(time.Now().Unix())
					endTimeUts, _ := strconv.Atoi(fondsVotes[i].EndTime)

					isVote := mongo.IsVote(session, fondsVotes[i].ID, userID)
					fmt.Print(isVote)
					// –ï—Å–ª–∏ –≥–æ–ª–æ—Å–≤–∞–Ω–∏–µ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–æ
					if currentTimeUts <= endTimeUts == true {

						// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –≥–æ–ª–æ–≤–∞–ª
						if isVote {
							voteID = append(voteID, fondsVotes[i].ID)
							var msg1 = ""
							msg1 += "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: "
							msg1 += "*" + fond.Name + "*\n"
							msg1 += "\n*" + fondsVotes[i].Description + "*\n"
							msg1 += "\n–ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ —ç—Ç–æ–º—É —Ä–µ—à–µ–Ω–∏—é?"
							msg1 += " "
							b.Send(c.Sender, msg1, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: buttonYesNoArr[key]})
							b.Respond(c, &tb.CallbackResponse{})
						} else {

							msg2 := "–í—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª —É—á–∞—Å—Ç–∏–µ –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏  "
							msg2 += "*" + fond.Name + "*. –û–∂–∏–¥–∞–π—Ç–µ *—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã*\n"
							b.Send(c.Sender, msg2, &tb.SendOptions{ParseMode: "Markdown"})
						}

					} else {
						msg += "–ê–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ–ª—Å–æ–æ–≤–∞–Ω–∏–π –±–æ–ª—å—à–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
						b.Send(c.Sender, msg, &tb.SendOptions{ParseMode: "Markdown"})
					}
				}
			}
		} else {
			msg += "–í—ã –µ—â—ë –Ω–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–ª–∏ ETH –∫–∞–∫–æ–π-–ª–∏–±–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"
			b.Send(c.Sender, msg, &tb.SendOptions{ParseMode: "Markdown"})
		}
	})

	// –ß–µ–∫–∞–µ–º –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –ª–∏—Å—Ç—ã –∏ –¥—Ä—É–≥–æ–µ

	// inline buttons 1-9 –ò–Ω—Ñ–∞ –æ —Ñ–æ–Ω–¥–∞—Ö

	b.Handle(&inlineBtn0, func(c *tb.Callback) {
		b.Edit(c.Message, orglist.GetFoundations(session)[0], &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdCalc})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineBtn1, func(c *tb.Callback) {
		b.Edit(c.Message, orglist.GetFoundations(session)[1], &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdCalc})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineBtn2, func(c *tb.Callback) {
		b.Edit(c.Message, orglist.GetFoundations(session)[2], &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdCalc})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineBtn3, func(c *tb.Callback) {
		b.Edit(c.Message, orglist.GetFoundations(session)[3], &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdCalc})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineBtn4, func(c *tb.Callback) {
		b.Edit(c.Message, orglist.GetFoundations(session)[4], &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdCalc})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineBtn5, func(c *tb.Callback) {
		b.Edit(c.Message, orglist.GetFoundations(session)[5], &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdCalc})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineBtn6, func(c *tb.Callback) {
		b.Edit(c.Message, orglist.GetFoundations(session)[6], &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdCalc})
		b.Respond(c, &tb.CallbackResponse{})
	})
	// b.Handle(&inlineBtn7, func(c *tb.Callback) {
	// 	b.Edit(c.Message, orglist.Data7, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdCalc})
	// 	b.Respond(c, &tb.CallbackResponse{})
	// })
	// b.Handle(&inlineBtn8, func(c *tb.Callback) {
	// 	b.Edit(c.Message, orglist.Data8, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdCalc})
	// 	b.Respond(c, &tb.CallbackResponse{})
	// })

	// inline buttons 1-6

	// —Å–ª—É—à–∞–µ—Ç –∫–∞–∫–æ–π —Ñ–æ–Ω–¥ –≤—ã–±—Ä–∞–ª
	b.Handle("/fond0", func(m *tb.Message) {
		allFonds := mongo.FindAllFoundations(session)
		fond = allFonds[0].Name
		// fond = "Bill & Melinda Gates Foundation"
		b.Send(m.Sender, orglist.GetAllInfoAbtFoundations(session)[0], &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineInvMenu})
	})
	b.Handle("/fond1", func(m *tb.Message) {
		allFonds := mongo.FindAllFoundations(session)
		fond = allFonds[1].Name
		// fond = "–ü–æ–¥–∞—Ä–∏ –ñ–∏–∑–Ω—å"
		b.Send(m.Sender, orglist.GetAllInfoAbtFoundations(session)[1], &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineInvMenu})
	})
	b.Handle("/fond2", func(m *tb.Message) {
		// fond = "Welcome Trust"
		allFonds := mongo.FindAllFoundations(session)
		fond = allFonds[2].Name
		b.Send(m.Sender, orglist.GetAllInfoAbtFoundations(session)[2], &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineInvMenu})
	})
	b.Handle("/fond3", func(m *tb.Message) {
		// fond = "Ford Foundation"
		allFonds := mongo.FindAllFoundations(session)
		fond = allFonds[3].Name
		b.Send(m.Sender, orglist.GetAllInfoAbtFoundations(session)[3], &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineInvMenu})
	})
	b.Handle("/fond4", func(m *tb.Message) {
		allFonds := mongo.FindAllFoundations(session)
		fond = allFonds[4].Name
		// fond = "Linux Foundation"
		b.Send(m.Sender, orglist.GetAllInfoAbtFoundations(session)[4], &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineInvMenu})
	})
	b.Handle("/fond5", func(m *tb.Message) {
		allFonds := mongo.FindAllFoundations(session)
		fond = allFonds[5].Name
		// fond = "Ethereum Foundation"
		b.Send(m.Sender, orglist.GetAllInfoAbtFoundations(session)[5], &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineInvMenu})
	})
	b.Handle("/fond6", func(m *tb.Message) {
		allFonds := mongo.FindAllFoundations(session)
		fond = allFonds[6].Name
		// fond = "–†—É—Å–§–æ–Ω–¥–∞"
		b.Send(m.Sender, orglist.GetAllInfoAbtFoundations(session)[6], &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineInvMenu})
	})

	// —Å–ª—É—à–∞–µ—Ç –∫–∞–∫–æ–π —Ñ–æ–Ω–¥ –≤—ã–±—Ä–∞–ª

	// —Ç—É—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∫–∞ –ø–æ –∑–∞–Ω–µ—Å–µ–Ω–∏—é –¥–µ–Ω–µ–≥
	b.Handle(&inlineklav0, func(c *tb.Callback) {
		sum += "0"
		var msg = orglist.EnterSum + "–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: " + sum + " " + concurrency
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdsum})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineklav1, func(c *tb.Callback) {
		sum += "1"
		var msg = orglist.EnterSum + "–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: " + sum + " " + concurrency
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdsum})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineklav2, func(c *tb.Callback) {
		sum += "2"
		var msg = orglist.EnterSum + "–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: " + sum + " " + concurrency
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdsum})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineklav3, func(c *tb.Callback) {
		sum += "3"
		var msg = orglist.EnterSum + "–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: " + sum + " " + concurrency
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdsum})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineklav4, func(c *tb.Callback) {
		sum += "4"
		var msg = orglist.EnterSum + "–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: " + sum + " " + concurrency
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdsum})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineklav5, func(c *tb.Callback) {
		sum += "5"
		var msg = orglist.EnterSum + "–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: " + sum + " " + concurrency
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdsum})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineklav6, func(c *tb.Callback) {
		sum += "6"
		var msg = orglist.EnterSum + "–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: " + sum + " " + concurrency
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdsum})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineklav7, func(c *tb.Callback) {
		sum += "7"
		var msg = orglist.EnterSum + "–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: " + sum + " " + concurrency
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdsum})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineklav8, func(c *tb.Callback) {
		sum += "8"
		var msg = orglist.EnterSum + "–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: " + sum + " " + concurrency
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdsum})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineklav9, func(c *tb.Callback) {
		sum += "9"
		var msg = orglist.EnterSum + "–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: " + sum + " " + concurrency
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdsum})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineklavdot, func(c *tb.Callback) {
		sum += "."
		var msg = orglist.EnterSum + "–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: " + sum + " " + concurrency
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdsum})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineklavrenew, func(c *tb.Callback) {
		sum = ""
		var msg = orglist.EnterSum + "–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: " + sum + " " + concurrency
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdsum})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineklavdellast, func(c *tb.Callback) {
		sz := len(sum)
		if sz > 0 {
			sum = sum[:sz-1]
		}
		var msg = orglist.EnterSum + "–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: " + sum + " " + concurrency
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdsum})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&inlineklavapply, func(c *tb.Callback) {
		var torub = course.Course("RUB")
		var torub2, err = strconv.ParseFloat(sum, 64)
		if err != nil {
			println(err)
		}
		torub3 := (1.0 / (gjson.Get(string(torub), "ETH").Float())) * torub2

		var ethrub = strconv.FormatFloat(torub3, 'g', 8, 64)

		var msg = "*–î–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–≤–æ–¥–µ*\n\n" + "`–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: ` *" + fond + "*\n\n`–°—É–º–º–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è:` *" + sum + "*` " + concurrency + "` –∏–ª–∏ *" + ethrub + "* `RUB`"

		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdaply})
		b.Respond(c, &tb.CallbackResponse{})

	})
	b.Handle(&inlineklavback, func(c *tb.Callback) {
		sum = ""
		concurrency = ""
		var msg = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: \n\n`–¢–æ–ª—å–∫–æ –¥–ª—è ETH –¥–æ—Å—Ç—É–ø–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–æ–≥–æ, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è`"
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineCurrency})
		b.Respond(c, &tb.CallbackResponse{})
	})

	// —Ç—É—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∫–∞ –ø–æ –∑–∞–Ω–µ—Å–µ–Ω–∏—é –¥–µ–Ω–µ–≥

	// –í—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É –ø–æ—Å–ª–µ —Ñ–æ–Ω–¥–∞
	b.Handle(&inlineInv, func(c *tb.Callback) {
		var msg = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: \n\n`–¢–æ–ª—å–∫–æ –¥–ª—è ETH –¥–æ—Å—Ç—É–ø–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–æ–≥–æ, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è`"
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineCurrency})
		b.Respond(c, &tb.CallbackResponse{})
	})

	// b.Handle(&inlineBtnWAV, func(c *tb.Callback) {
	// 	concurrency = "Waves"
	// 	var msg = orglist.EnterSum + "–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: " + sum + " " + concurrency
	// 	b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdsum})
	// 	b.Respond(c, &tb.CallbackResponse{})
	// })

	// b.Handle(&inlineBtnBTC, func(c *tb.Callback) {
	// 	concurrency = "Bitcoin"
	// 	var msg = orglist.EnterSum + "–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: " + sum + " " + concurrency
	// 	b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdsum})
	// 	b.Respond(c, &tb.CallbackResponse{})
	// })

	b.Handle(&inlineBtnETH, func(c *tb.Callback) {
		concurrency = "Ethereum"
		var msg = orglist.EnterSum + "–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: " + sum + " " + concurrency
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdsum})
		b.Respond(c, &tb.CallbackResponse{})
	})

	// b.Handle(&inlineBtnLTC, func(c *tb.Callback) {
	// 	concurrency = "Litecoin"
	// 	var msg = orglist.EnterSum + "–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: " + sum + " " + concurrency
	// 	b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: inlineKbrdsum})
	// 	b.Respond(c, &tb.CallbackResponse{})
	// })

	// –í—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É –ø–æ—Å–ª–µ —Ñ–æ–Ω–¥–∞

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤
	b.Handle(&voteButtonYes0, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "1", "true")
		mongo.AddVoter(session, voteID[0], userID, true)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&voteButtonNo0, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "1", "false")
		mongo.AddVoter(session, voteID[0], userID, false)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})

	b.Handle(&voteButtonYes1, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "2", "true")
		mongo.AddVoter(session, voteID[1], userID, true)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&voteButtonNo1, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "2", "false")
		mongo.AddVoter(session, voteID[1], userID, false)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})

	b.Handle(&voteButtonYes2, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "3", "true")
		mongo.AddVoter(session, voteID[2], userID, true)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&voteButtonNo2, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "3", "false")
		mongo.AddVoter(session, voteID[2], userID, false)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})

	b.Handle(&voteButtonYes3, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "4", "true")
		mongo.AddVoter(session, voteID[3], userID, true)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&voteButtonNo3, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "4", "false")
		mongo.AddVoter(session, voteID[3], userID, false)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})

	b.Handle(&voteButtonYes4, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "5", "true")
		mongo.AddVoter(session, voteID[4], userID, true)

		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&voteButtonNo4, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "5", "false")
		mongo.AddVoter(session, voteID[4], userID, false)

		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})

	b.Handle(&voteButtonYes5, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "6", "true")
		mongo.AddVoter(session, voteID[5], userID, true)

		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&voteButtonNo5, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "6", "false")
		mongo.AddVoter(session, voteID[5], userID, false)

		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})

	b.Handle(&voteButtonYes6, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "7", "true")
		mongo.AddVoter(session, voteID[6], userID, true)

		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&voteButtonNo6, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "7", "false")
		mongo.AddVoter(session, voteID[6], userID, false)

		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})

	b.Handle(&voteButtonYes7, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "8", "true")
		mongo.AddVoter(session, voteID[7], userID, true)

		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&voteButtonNo7, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "8", "false")
		mongo.AddVoter(session, voteID[7], userID, false)

		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})

	b.Handle(&voteButtonYes8, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "9", "true")
		mongo.AddVoter(session, voteID[8], userID, true)

		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&voteButtonNo8, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "9", "false")
		mongo.AddVoter(session, voteID[8], userID, false)

		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})

	b.Handle(&voteButtonYes9, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "10", "true")
		mongo.AddVoter(session, voteID[9], userID, true)

		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&voteButtonNo9, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "10", "false")
		mongo.AddVoter(session, voteID[9], userID, false)

		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})

	b.Handle(&voteButtonYes10, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "11", "true")
		mongo.AddVoter(session, voteID[10], userID, true)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&voteButtonNo10, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "11", "false")
		mongo.AddVoter(session, voteID[10], userID, false)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})

	b.Handle(&voteButtonYes11, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "12", "true")
		mongo.AddVoter(session, voteID[11], userID, true)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&voteButtonNo11, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "12", "false")
		mongo.AddVoter(session, voteID[11], userID, false)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})

	b.Handle(&voteButtonYes12, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "13", "true")
		mongo.AddVoter(session, voteID[12], userID, true)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&voteButtonNo12, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "13", "false")
		mongo.AddVoter(session, voteID[12], userID, false)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})

	b.Handle(&voteButtonYes13, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "14", "true")
		mongo.AddVoter(session, voteID[13], userID, true)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&voteButtonNo13, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "14", "false")
		mongo.AddVoter(session, voteID[13], userID, false)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})

	b.Handle(&voteButtonYes14, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "15", "true")
		mongo.AddVoter(session, voteID[14], userID, true)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&voteButtonNo14, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "15", "false")
		mongo.AddVoter(session, voteID[14], userID, false)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})

	b.Handle(&voteButtonYes15, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "16", "true")
		mongo.AddVoter(session, voteID[15], userID, true)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&voteButtonNo15, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "16", "false")
		mongo.AddVoter(session, voteID[15], userID, false)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})

	b.Handle(&voteButtonYes16, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "17", "true")
		mongo.AddVoter(session, voteID[16], userID, true)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&voteButtonNo16, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "17", "false")
		mongo.AddVoter(session, voteID[16], userID, false)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})

	b.Handle(&voteButtonYes17, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "18", "true")
		mongo.AddVoter(session, voteID[17], userID, true)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&voteButtonNo17, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "18", "false")
		mongo.AddVoter(session, voteID[17], userID, false)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})

	b.Handle(&voteButtonYes18, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "19", "true")
		mongo.AddVoter(session, voteID[18], userID, true)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&voteButtonNo18, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "19", "false")
		mongo.AddVoter(session, voteID[18], userID, false)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})

	b.Handle(&voteButtonYes19, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "20", "true")
		mongo.AddVoter(session, voteID[19], userID, true)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&voteButtonNo19, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "20", "false")
		mongo.AddVoter(session, voteID[19], userID, false)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})

	b.Handle(&voteButtonYes20, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "21", "true")
		mongo.AddVoter(session, voteID[20], userID, true)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&voteButtonNo20, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "21", "false")
		mongo.AddVoter(session, voteID[20], userID, false)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})

	b.Handle(&voteButtonYes21, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "22", "true")
		mongo.AddVoter(session, voteID[21], userID, true)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&voteButtonNo21, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "22", "false")
		mongo.AddVoter(session, voteID[21], userID, false)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})

	b.Handle(&voteButtonYes22, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "23", "true")
		mongo.AddVoter(session, voteID[22], userID, true)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&voteButtonNo22, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "23", "false")
		mongo.AddVoter(session, voteID[22], userID, false)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})

	b.Handle(&voteButtonYes23, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "24", "true")
		mongo.AddVoter(session, voteID[23], userID, true)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&voteButtonNo23, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "24", "false")
		mongo.AddVoter(session, voteID[23], userID, false)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})

	b.Handle(&voteButtonYes24, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "25", "true")
		mongo.AddVoter(session, voteID[24], userID, true)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&voteButtonNo24, func(c *tb.Callback) {
		user := mongo.FindUserByID(session, userID)
		var msg = vote(user.EthPrvKey, "25", "false")
		mongo.AddVoter(session, voteID[24], userID, false)
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Respond(c, &tb.CallbackResponse{})
	})

	// final apply
	b.Handle(&inlin—Évapply, func(c *tb.Callback) {
		user := mongo.FindUser(session, strconv.Itoa(c.Sender.ID))

		var userid = strconv.Itoa(c.Sender.ID)
		var prvtKey = user.EthPrvKey
		var address = user.EthAddress

		var torub = course.Course("RUB")
		var torub2, err = strconv.ParseFloat(sum, 64)
		if err != nil {
			println(err)
		}
		torub3 := (1.0 / (gjson.Get(string(torub), "ETH").Float())) * torub2

		sum1, err := strconv.ParseFloat(sum, 64)
		if err != nil {
			println(err)
		}

		var sum23 = sum1 * math.Pow(10, 18)
		var sumString = strconv.FormatFloat(sum23, 'g', 18, 64)

		status := ethereum.SendTransaction(prvtKey, address, "0xD641ee9833f11Cd40C7Dd7b777C8e80bD8d842A8", sumString)

		if status != "400" {
			fondObj := mongo.FindFoundationByName(session, fond)

			mongo.AddFoundationToUser(session, userid, fondObj.ID, concurrency, sum1, torub3)
			var msg = "–ü–µ—Ä–µ–≤–æ–¥ —Å–æ–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ, –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ"
			concurrency = ""
			sum = ""
			fond = ""
			b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
			b.Send(c.Sender, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", &tb.SendOptions{DisableWebPagePreview: true}, &tb.ReplyMarkup{ReplyKeyboard: replyKeys})
			b.Respond(c, &tb.CallbackResponse{})
		} else {
			var text = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ"
			b.Send(c.Sender, text, &tb.SendOptions{DisableWebPagePreview: true, ParseMode: "Markdown"}, &tb.ReplyMarkup{ReplyKeyboard: replyKeys})
			b.Respond(c, &tb.CallbackResponse{})
		}
	})
	// final apply

	b.Start()
}
